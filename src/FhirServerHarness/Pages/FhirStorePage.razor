@page "/store"
@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager

@implements IDisposable

<PageTitle>FHIR Dev Server</PageTitle>

<MudTable @ref="_displayTable"
        Items="@_store.OrderBy(kvp => kvp.Key)"
        Filter="new Func<KeyValuePair<string, IResourceStore>, bool>(FilterFuncInstance)"
        Dense="true"
        Striped="true"
        Height="calc(100vh - (var(--mud-appbar-height) * 2))"
        FixedHeader="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">FHIR Resources: @StoreName</MudText>
        <MudSpacer />
        <MudSwitch Color="Color.Info" @bind-Checked="hideEmptyResources" Label="Hide empty" />
        <MudSpacer />
        <MudTextField @bind-Value="@resourceFilter" Label="Filter" DebounceInterval="100" OnDebounceIntervalElapsed="HandleResourceFilterChange" />
    </ToolBarContent>
    <ColGroup>
        <col style="width: 10vw!important;" />
        <col style="width: 50vw!important;" />
        <col style="width: 40vw!important;" />
    </ColGroup>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Resource Name</MudTh>
        <MudTh>Count</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd></MudTd>
        <MudTd DataLabel="Resource Name">@context.Key</MudTd>
        <MudTd DataLabel="Count">@context.Value.Count</MudTd>
    </RowTemplate>
</MudTable>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "storeName")]
    public string StoreName { get; set; } = "";

    private IFhirStore _store = null!;

    /// <summary>The display table.</summary>
    private MudTable<KeyValuePair<string, IResourceStore>>? _displayTable = null;

    /// <summary>True to hide or false to show empty resources.</summary>
    private bool hideEmptyResources = true;

    /// <summary>The resource search string.</summary>
    private string resourceFilter = string.Empty;

    private bool FilterFuncInstance(KeyValuePair<string, IResourceStore> kvp) => FilterFuncDefinition(kvp, resourceFilter);

    /// <summary>Filter function.</summary>
    /// <param name="e">A FhirElement to process.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncDefinition(KeyValuePair<string, IResourceStore> kvp, string searchString)
    {
        if (hideEmptyResources && (!kvp.Value.Any()))
        {
            return false;
        }

        if (string.IsNullOrEmpty(searchString))
        {
            return true;
        }

        return kvp.Key.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>Handles the filter change described by value.</summary>
    /// <param name="value">The value.</param>
    private void HandleResourceFilterChange(string value)
    {
        _displayTable?.UpdateSelection();
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _store = StoreManager.ContainsKey(StoreName) ? StoreManager[StoreName] : null!;

        if (_store != null)
        {
            _store.OnChanged += FhirStore_OnChanged;
        }

        NavTracker?.NotifyNav($"FHIR Store {StoreName}", "/store?storeName=" + StoreName, 1);
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/store?", StringComparison.Ordinal))
        {
            if (_store != null)
            {
                _store.OnChanged -= FhirStore_OnChanged;
            }

            _store = StoreManager.ContainsKey(StoreName) ? StoreManager[StoreName] : null!;

            if (_store != null)
            {
                _store.OnChanged += FhirStore_OnChanged;
            }

            NavTracker?.NotifyNav($"FHIR Store {StoreName}", "/store?storeName=" + StoreName, 1);
        }
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void FhirStore_OnChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        if (_store != null)
        {
            _store.OnChanged -= FhirStore_OnChanged;
        }
    }
}
