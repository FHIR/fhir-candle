@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedLocalStorage BrowserStore

@implements INavTracker

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Color="Color.Info" Fixed="false" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudBreadcrumbs Items="_crumbs"></MudBreadcrumbs>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/GinoCanessa/cs-fhir-server-harness" Target="_blank" />
        <MudToggleIconButton @bind-Toggled="@IsDarkMode"
                             Color="Color.Inherit"
                             Icon="@Icons.Material.Filled.LightMode"
                             ToggledIcon="@Icons.Material.Filled.DarkMode" />
    </MudAppBar>

    <MudDrawer @bind-Open="showNav" DisableOverlay="true" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">FHIR Dev Server</MudText>
            <MudSpacer />
            <MudFab StartIcon="@Icons.Material.Filled.Close" OnClick="@ToggleDrawer" Size="Size.Small" />
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Href="/">FHIR Dev Server</MudNavLink>
            @*<MudNavGroup Title="Packages" Expanded="true">
                @foreach ((string key, PackageCacheRecord record) in PackageService)
                {
                    if ((record.PackageState != PackageLoadStateEnum.Loaded) ||
                        (record.Details == null))
                    {
                        continue;
                    }

                    <MudNavLink Href="@LinkForPackage(key)" Icon="@Icons.Material.Filled.Archive">@key</MudNavLink>
                }

            </MudNavGroup>*@
        </MudNavMenu>
    </MudDrawer>

    @*Note that we have to set padding-top here because of the non-fixed app bar *@
    <MudMainContent style="padding-top: 0px; margin-left: 4px; margin-right: 4px;">
        <CascadingValue Value="this">
            @Body
        </CascadingValue>
    </MudMainContent>
</MudLayout>

@code {

    private MudTheme _theme = new()
    {
        Typography = new()
        {
            Body2 = new Body2()
            {
                FontFamily = new[] { "Lucida Console", "Courier New", "monospace" },
                FontWeight = 500,
            }
        }
    };

    private bool _isDarkMode = true;

    private bool IsDarkMode
    {
        get
        {
            return _isDarkMode;
        }

        set
        {
            if (_isDarkMode != value)
            {
                _isDarkMode = value;
                BrowserStore.SetAsync("darkMode", _isDarkMode);
            }
        }
    }

    private List<BreadcrumbItem> _crumbs = new()
    {
        new BreadcrumbItem("FHIR Cache", "#"),
    };

    /// <summary>True to show, false to hide the navigation.</summary>
    private bool showNav = false;

    /// <summary>Toggle drawer.</summary>
    void ToggleDrawer()
    {
        showNav = !showNav;
    }

    /// <summary>Links for package.</summary>
    /// <param name="directive">The directive.</param>
    /// <returns>A string.</returns>
    private string LinkForPackage(string directive)
    {
        string[] parts = directive.Split('#');
        return $"/view/package?packageName={parts[0]}&version={parts[1]}";
    }

    /// <summary>Executes the after render asynchronous action.</summary>
    /// <param name="firstRender">True to first render.</param>
    /// <returns>An asynchronous result.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ProtectedBrowserStorageResult<bool> optReadResult = await BrowserStore.GetAsync<bool>("darkMode");

            IsDarkMode = optReadResult.Value;
            StateHasChanged();
        }
    }

    /// <summary>Notifies a navigation.</summary>
    /// <param name="page"> The page.</param>
    /// <param name="link"> The link.</param>
    /// <param name="depth">The depth.</param>
    public void NotifyNav(string page, string link, int depth)
    {
        if (_crumbs.Count > depth)
        {
            _crumbs.RemoveRange(depth, _crumbs.Count - depth);
        }

        _crumbs.Add(new BreadcrumbItem(page, link));

        StateHasChanged();
    }
}
