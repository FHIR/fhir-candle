//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\UCUM.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
//[System.CLSCompliant(false)]
public partial class UCUMParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, NON_DIGIT_TERMINAL_UNIT_SYMBOL=14, 
		DIGIT_SYMBOL=15;
	public const int
		RULE_mainTerm = 0, RULE_term = 1, RULE_component = 2, RULE_annotatable = 3, 
		RULE_simpleUnit = 4, RULE_simpleUnitSymbols = 5, RULE_annotationSymbols = 6, 
		RULE_squareBracketsSymbols = 7, RULE_withinSbSymbol = 8, RULE_withinCbSymbol = 9, 
		RULE_withinCbOrSbSymbol = 10, RULE_terminalUnitSymbol = 11, RULE_exponent = 12, 
		RULE_digitSymbols = 13;
	public static readonly string[] ruleNames = {
		"mainTerm", "term", "component", "annotatable", "simpleUnit", "simpleUnitSymbols", 
		"annotationSymbols", "squareBracketsSymbols", "withinSbSymbol", "withinCbSymbol", 
		"withinCbOrSbSymbol", "terminalUnitSymbol", "exponent", "digitSymbols"
	};

	private static readonly string[] _LiteralNames = {
		null, "'/'", "'.'", "'('", "')'", "'{'", "'}'", "'['", "']'", "' '", "'\"'", 
		"'+'", "'-'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "NON_DIGIT_TERMINAL_UNIT_SYMBOL", "DIGIT_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UCUM.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UCUMParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UCUMParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UCUMParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(UCUMParser.Eof, 0); }
		public MainTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterMainTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitMainTerm(this);
		}
	}

	[RuleVersion(0)]
	public MainTermContext mainTerm() {
		MainTermContext _localctx = new MainTermContext(Context, State);
		EnterRule(_localctx, 0, RULE_mainTerm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			term();
			State = 29;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComponentContext component() {
			return GetRuleContext<ComponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 2, RULE_term);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 31;
				component();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32;
				Match(T__0);
				State = 33;
				term();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 34;
				component();
				State = 35;
				Match(T__0);
				State = 36;
				term();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 38;
				component();
				State = 39;
				Match(T__1);
				State = 40;
				term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationSymbolsContext annotationSymbols() {
			return GetRuleContext<AnnotationSymbolsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotatableContext annotatable() {
			return GetRuleContext<AnnotatableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitSymbolsContext digitSymbols() {
			return GetRuleContext<DigitSymbolsContext>(0);
		}
		public ComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitComponent(this);
		}
	}

	[RuleVersion(0)]
	public ComponentContext component() {
		ComponentContext _localctx = new ComponentContext(Context, State);
		EnterRule(_localctx, 4, RULE_component);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44;
				Match(T__2);
				State = 45;
				term();
				State = 46;
				Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				Match(T__2);
				State = 49;
				term();
				State = 50;
				Match(T__3);
				State = 51;
				annotationSymbols();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53;
				annotatable();
				State = 54;
				annotationSymbols();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 56;
				annotationSymbols();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 57;
				annotatable();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 58;
				digitSymbols();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotatableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleUnitContext simpleUnit() {
			return GetRuleContext<SimpleUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		public AnnotatableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotatable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterAnnotatable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitAnnotatable(this);
		}
	}

	[RuleVersion(0)]
	public AnnotatableContext annotatable() {
		AnnotatableContext _localctx = new AnnotatableContext(Context, State);
		EnterRule(_localctx, 6, RULE_annotatable);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61;
				simpleUnit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62;
				simpleUnit();
				State = 63;
				exponent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleUnitSymbolsContext[] simpleUnitSymbols() {
			return GetRuleContexts<SimpleUnitSymbolsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleUnitSymbolsContext simpleUnitSymbols(int i) {
			return GetRuleContext<SimpleUnitSymbolsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SquareBracketsSymbolsContext squareBracketsSymbols() {
			return GetRuleContext<SquareBracketsSymbolsContext>(0);
		}
		public SimpleUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterSimpleUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitSimpleUnit(this);
		}
	}

	[RuleVersion(0)]
	public SimpleUnitContext simpleUnit() {
		SimpleUnitContext _localctx = new SimpleUnitContext(Context, State);
		EnterRule(_localctx, 8, RULE_simpleUnit);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67;
				simpleUnitSymbols();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				squareBracketsSymbols();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				squareBracketsSymbols();
				State = 70;
				simpleUnitSymbols();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72;
				simpleUnitSymbols();
				State = 73;
				squareBracketsSymbols();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 75;
				simpleUnitSymbols();
				State = 76;
				squareBracketsSymbols();
				State = 77;
				simpleUnitSymbols();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleUnitSymbolsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalUnitSymbolContext[] terminalUnitSymbol() {
			return GetRuleContexts<TerminalUnitSymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalUnitSymbolContext terminalUnitSymbol(int i) {
			return GetRuleContext<TerminalUnitSymbolContext>(i);
		}
		public SimpleUnitSymbolsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleUnitSymbols; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterSimpleUnitSymbols(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitSimpleUnitSymbols(this);
		}
	}

	[RuleVersion(0)]
	public SimpleUnitSymbolsContext simpleUnitSymbols() {
		SimpleUnitSymbolsContext _localctx = new SimpleUnitSymbolsContext(Context, State);
		EnterRule(_localctx, 10, RULE_simpleUnitSymbols);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 81;
					terminalUnitSymbol();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationSymbolsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WithinCbSymbolContext[] withinCbSymbol() {
			return GetRuleContexts<WithinCbSymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithinCbSymbolContext withinCbSymbol(int i) {
			return GetRuleContext<WithinCbSymbolContext>(i);
		}
		public AnnotationSymbolsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationSymbols; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterAnnotationSymbols(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitAnnotationSymbols(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationSymbolsContext annotationSymbols() {
		AnnotationSymbolsContext _localctx = new AnnotationSymbolsContext(Context, State);
		EnterRule(_localctx, 12, RULE_annotationSymbols);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(T__4);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 87;
				withinCbSymbol();
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 65438L) != 0) );
			State = 92;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareBracketsSymbolsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WithinSbSymbolContext[] withinSbSymbol() {
			return GetRuleContexts<WithinSbSymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithinSbSymbolContext withinSbSymbol(int i) {
			return GetRuleContext<WithinSbSymbolContext>(i);
		}
		public SquareBracketsSymbolsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareBracketsSymbols; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterSquareBracketsSymbols(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitSquareBracketsSymbols(this);
		}
	}

	[RuleVersion(0)]
	public SquareBracketsSymbolsContext squareBracketsSymbols() {
		SquareBracketsSymbolsContext _localctx = new SquareBracketsSymbolsContext(Context, State);
		EnterRule(_localctx, 14, RULE_squareBracketsSymbols);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(T__6);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 95;
				withinSbSymbol();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 64638L) != 0) );
			State = 100;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithinSbSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WithinCbOrSbSymbolContext withinCbOrSbSymbol() {
			return GetRuleContext<WithinCbOrSbSymbolContext>(0);
		}
		public WithinSbSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withinSbSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterWithinSbSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitWithinSbSymbol(this);
		}
	}

	[RuleVersion(0)]
	public WithinSbSymbolContext withinSbSymbol() {
		WithinSbSymbolContext _localctx = new WithinSbSymbolContext(Context, State);
		EnterRule(_localctx, 16, RULE_withinSbSymbol);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case NON_DIGIT_TERMINAL_UNIT_SYMBOL:
			case DIGIT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102;
				withinCbOrSbSymbol();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				Match(T__4);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithinCbSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WithinCbOrSbSymbolContext withinCbOrSbSymbol() {
			return GetRuleContext<WithinCbOrSbSymbolContext>(0);
		}
		public WithinCbSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withinCbSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterWithinCbSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitWithinCbSymbol(this);
		}
	}

	[RuleVersion(0)]
	public WithinCbSymbolContext withinCbSymbol() {
		WithinCbSymbolContext _localctx = new WithinCbSymbolContext(Context, State);
		EnterRule(_localctx, 18, RULE_withinCbSymbol);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case NON_DIGIT_TERMINAL_UNIT_SYMBOL:
			case DIGIT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				withinCbOrSbSymbol();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				Match(T__8);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109;
				Match(T__6);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithinCbOrSbSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalUnitSymbolContext terminalUnitSymbol() {
			return GetRuleContext<TerminalUnitSymbolContext>(0);
		}
		public WithinCbOrSbSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withinCbOrSbSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterWithinCbOrSbSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitWithinCbOrSbSymbol(this);
		}
	}

	[RuleVersion(0)]
	public WithinCbOrSbSymbolContext withinCbOrSbSymbol() {
		WithinCbOrSbSymbolContext _localctx = new WithinCbOrSbSymbolContext(Context, State);
		EnterRule(_localctx, 20, RULE_withinCbOrSbSymbol);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NON_DIGIT_TERMINAL_UNIT_SYMBOL:
			case DIGIT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				terminalUnitSymbol();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				Match(T__9);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115;
				Match(T__2);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 116;
				Match(T__3);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 5);
				{
				State = 117;
				Match(T__10);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 6);
				{
				State = 118;
				Match(T__11);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 7);
				{
				State = 119;
				Match(T__1);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 8);
				{
				State = 120;
				Match(T__0);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 9);
				{
				State = 121;
				Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalUnitSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_DIGIT_TERMINAL_UNIT_SYMBOL() { return GetToken(UCUMParser.NON_DIGIT_TERMINAL_UNIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SYMBOL() { return GetToken(UCUMParser.DIGIT_SYMBOL, 0); }
		public TerminalUnitSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalUnitSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterTerminalUnitSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitTerminalUnitSymbol(this);
		}
	}

	[RuleVersion(0)]
	public TerminalUnitSymbolContext terminalUnitSymbol() {
		TerminalUnitSymbolContext _localctx = new TerminalUnitSymbolContext(Context, State);
		EnterRule(_localctx, 22, RULE_terminalUnitSymbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			_la = TokenStream.LA(1);
			if ( !(_la==NON_DIGIT_TERMINAL_UNIT_SYMBOL || _la==DIGIT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DigitSymbolsContext digitSymbols() {
			return GetRuleContext<DigitSymbolsContext>(0);
		}
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(Context, State);
		EnterRule(_localctx, 24, RULE_exponent);
		int _la;
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__11) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 127;
				digitSymbols();
				}
				break;
			case DIGIT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				digitSymbols();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DigitSymbolsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SYMBOL() { return GetTokens(UCUMParser.DIGIT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SYMBOL(int i) {
			return GetToken(UCUMParser.DIGIT_SYMBOL, i);
		}
		public DigitSymbolsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_digitSymbols; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.EnterDigitSymbols(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUCUMListener typedListener = listener as IUCUMListener;
			if (typedListener != null) typedListener.ExitDigitSymbols(this);
		}
	}

	[RuleVersion(0)]
	public DigitSymbolsContext digitSymbols() {
		DigitSymbolsContext _localctx = new DigitSymbolsContext(Context, State);
		EnterRule(_localctx, 26, RULE_digitSymbols);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 131;
				Match(DIGIT_SYMBOL);
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,15,137,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,1,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,43,8,1,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,60,8,2,1,3,1,3,1,3,1,
		3,3,3,66,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,80,8,
		4,1,5,4,5,83,8,5,11,5,12,5,84,1,6,1,6,4,6,89,8,6,11,6,12,6,90,1,6,1,6,
		1,7,1,7,4,7,97,8,7,11,7,12,7,98,1,7,1,7,1,8,1,8,1,8,3,8,106,8,8,1,9,1,
		9,1,9,1,9,3,9,112,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
		123,8,10,1,11,1,11,1,12,1,12,1,12,3,12,130,8,12,1,13,4,13,133,8,13,11,
		13,12,13,134,1,13,0,0,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,2,1,0,
		14,15,1,0,11,12,153,0,28,1,0,0,0,2,42,1,0,0,0,4,59,1,0,0,0,6,65,1,0,0,
		0,8,79,1,0,0,0,10,82,1,0,0,0,12,86,1,0,0,0,14,94,1,0,0,0,16,105,1,0,0,
		0,18,111,1,0,0,0,20,122,1,0,0,0,22,124,1,0,0,0,24,129,1,0,0,0,26,132,1,
		0,0,0,28,29,3,2,1,0,29,30,5,0,0,1,30,1,1,0,0,0,31,43,3,4,2,0,32,33,5,1,
		0,0,33,43,3,2,1,0,34,35,3,4,2,0,35,36,5,1,0,0,36,37,3,2,1,0,37,43,1,0,
		0,0,38,39,3,4,2,0,39,40,5,2,0,0,40,41,3,2,1,0,41,43,1,0,0,0,42,31,1,0,
		0,0,42,32,1,0,0,0,42,34,1,0,0,0,42,38,1,0,0,0,43,3,1,0,0,0,44,45,5,3,0,
		0,45,46,3,2,1,0,46,47,5,4,0,0,47,60,1,0,0,0,48,49,5,3,0,0,49,50,3,2,1,
		0,50,51,5,4,0,0,51,52,3,12,6,0,52,60,1,0,0,0,53,54,3,6,3,0,54,55,3,12,
		6,0,55,60,1,0,0,0,56,60,3,12,6,0,57,60,3,6,3,0,58,60,3,26,13,0,59,44,1,
		0,0,0,59,48,1,0,0,0,59,53,1,0,0,0,59,56,1,0,0,0,59,57,1,0,0,0,59,58,1,
		0,0,0,60,5,1,0,0,0,61,66,3,8,4,0,62,63,3,8,4,0,63,64,3,24,12,0,64,66,1,
		0,0,0,65,61,1,0,0,0,65,62,1,0,0,0,66,7,1,0,0,0,67,80,3,10,5,0,68,80,3,
		14,7,0,69,70,3,14,7,0,70,71,3,10,5,0,71,80,1,0,0,0,72,73,3,10,5,0,73,74,
		3,14,7,0,74,80,1,0,0,0,75,76,3,10,5,0,76,77,3,14,7,0,77,78,3,10,5,0,78,
		80,1,0,0,0,79,67,1,0,0,0,79,68,1,0,0,0,79,69,1,0,0,0,79,72,1,0,0,0,79,
		75,1,0,0,0,80,9,1,0,0,0,81,83,3,22,11,0,82,81,1,0,0,0,83,84,1,0,0,0,84,
		82,1,0,0,0,84,85,1,0,0,0,85,11,1,0,0,0,86,88,5,5,0,0,87,89,3,18,9,0,88,
		87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,
		93,5,6,0,0,93,13,1,0,0,0,94,96,5,7,0,0,95,97,3,16,8,0,96,95,1,0,0,0,97,
		98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,100,1,0,0,0,100,101,5,8,0,0,
		101,15,1,0,0,0,102,106,3,20,10,0,103,106,5,5,0,0,104,106,5,6,0,0,105,102,
		1,0,0,0,105,103,1,0,0,0,105,104,1,0,0,0,106,17,1,0,0,0,107,112,3,20,10,
		0,108,112,5,9,0,0,109,112,5,7,0,0,110,112,5,8,0,0,111,107,1,0,0,0,111,
		108,1,0,0,0,111,109,1,0,0,0,111,110,1,0,0,0,112,19,1,0,0,0,113,123,3,22,
		11,0,114,123,5,10,0,0,115,123,5,3,0,0,116,123,5,4,0,0,117,123,5,11,0,0,
		118,123,5,12,0,0,119,123,5,2,0,0,120,123,5,1,0,0,121,123,5,13,0,0,122,
		113,1,0,0,0,122,114,1,0,0,0,122,115,1,0,0,0,122,116,1,0,0,0,122,117,1,
		0,0,0,122,118,1,0,0,0,122,119,1,0,0,0,122,120,1,0,0,0,122,121,1,0,0,0,
		123,21,1,0,0,0,124,125,7,0,0,0,125,23,1,0,0,0,126,127,7,1,0,0,127,130,
		3,26,13,0,128,130,3,26,13,0,129,126,1,0,0,0,129,128,1,0,0,0,130,25,1,0,
		0,0,131,133,5,15,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,0,0,134,
		135,1,0,0,0,135,27,1,0,0,0,12,42,59,65,79,84,90,98,105,111,122,129,134
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
