@using Microsoft.FluentUI.AspNetCore.Components;

@inject IJSRuntime JS

@implements IDisposable


<FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
    <FluentLabel Typo="Typography.H6">@ResourceType Resources</FluentLabel>
    
    @* <FluentLabel>Selected Ids: @(string.Join(", ", SelectedIds))</FluentLabel> *@

    <FluentDataGrid Items="@FilteredItems" GridTemplateColumns="@ColSizes" RowClass="@(itr => SelectedIds.Contains(itr.Id) ? "highlighted-row" : null)" ItemKey="@(i => i.Id)" OnRowFocus="HandleRowFocus" TGridItem=InstanceTableRec>
        <PropertyColumn Title="Id" Property="@(t => t.Id)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(IdFilter)" Tooltip="true">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch 
                        Autofocus="true"
                        @bind-Value="IdFilter"
                        @bind-Value:after="HandleFilterClear"
                        @oninput="@(e => IdFilter = e.Value?.ToString() ?? string.Empty)"
                        Placeholder="Resource ID..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>

        @if (ResourceStore.ResourcesHaveName)
        {
            <PropertyColumn Title="Name" Property="@(t => t.Name)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(NameFilter)" Tooltip="true" IsDefaultSortColumn="true">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch 
                            Autofocus="true"
                            @bind-Value="NameFilter"
                            @bind-Value:after="HandleFilterClear"
                            @oninput="@(e => NameFilter = e.Value?.ToString() ?? string.Empty)"
                            Placeholder="Name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        }

        @if (ResourceStore.ResourcesAreConformance)
        {
            <PropertyColumn Title="Url" Property="@(t => t.Url)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(UrlFilter)" Tooltip="true">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch 
                            Autofocus="true"
                            @bind-Value="UrlFilter"
                            @bind-Value:after="HandleFilterClear"
                            @oninput="@(e => UrlFilter = e.Value?.ToString() ?? string.Empty)"
                            Placeholder="Url..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Title="Description" Property="@(t => t.Description)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(DescriptionFilter)" Tooltip="true">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch 
                            Autofocus="true"
                            @bind-Value="DescriptionFilter"
                            @bind-Value:after="HandleFilterClear"
                            @oninput="@(e => DescriptionFilter = e.Value?.ToString() ?? string.Empty)"
                            Placeholder="Description..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        }

        @if (ResourceStore.ResourcesAreIdentifiable)
        {
            <PropertyColumn Title="Identifiers" Property="@(t => t.Identifiers)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(IdentifierFilter)" Tooltip="true">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch 
                            Autofocus="true"
                            @bind-Value="IdentifierFilter"
                            @bind-Value:after="HandleFilterClear"
                            @oninput="@(e => IdentifierFilter = e.Value?.ToString() ?? string.Empty)"
                            Placeholder="Identifier..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        }
    </FluentDataGrid>
</FluentStack>


@code {
    /// <summary>The FHIR store.</summary>
    [Parameter]
    public IFhirStore Store { get; set; } = null!;

    /// <summary>The resource store.</summary>
    [Parameter]
    public IResourceStore ResourceStore { get; set; } = null!;

    [Parameter]
    public string ResourceType { get; set; } = string.Empty;

    [Parameter]
    public bool AllowMultipleSelection { get; set; } = false;

    [Parameter]
    public HashSet<string> SelectedIds { get; set; } = new();

    [Parameter]
    public EventCallback<HashSet<string>> SelectedIdsChanged { get; set; }

    private string ColSizes => "1fr" +
        (ResourceStore.ResourcesHaveName ? " 1fr" : string.Empty) +
        (ResourceStore.ResourcesAreConformance ? " 1fr 1fr" : string.Empty) +
        (ResourceStore.ResourcesAreIdentifiable ? " 1fr" : string.Empty);

    private System.Timers.Timer? debounceTimer = null;

    private IQueryable<InstanceTableRec>? _filteredItems = null;

    private IQueryable<InstanceTableRec>? FilteredItems => _filteredItems;

    // private readonly HashSet<string> _selectedIds = new();

    private string _idFilter = string.Empty;

    private string IdFilter
    {
        get => _idFilter;
        set
        {
            if (value != _idFilter)
            {
                _idFilter = value;
                ResetDebounce();
            }
        }
    }

    private string _nameFilter = string.Empty;

    private string NameFilter
    {
        get => _nameFilter;
        set
        {
            if (value != _nameFilter)
            {
                _nameFilter = value;
                ResetDebounce();
            }
        }
    }

    private string _urlFilter = string.Empty;

    private string UrlFilter
    {
        get => _urlFilter;
        set
        {
            if (value != _urlFilter)
            {
                _urlFilter = value;
                ResetDebounce();
            }
        }
    }

    private string _descriptionFilter = string.Empty;

    private string DescriptionFilter
    {
        get => _descriptionFilter;
        set
        {
            if (value != _descriptionFilter)
            {
                _descriptionFilter = value;
                ResetDebounce();
            }
        }
    }

    private string _identifierFilter = string.Empty;

    private string IdentifierFilter
    {
        get => _identifierFilter;
        set
        {
            if (value != _identifierFilter)
            {
                _identifierFilter = value;
                ResetDebounce();
            }
        }
    }

    /// <summary>Gets filtered items.</summary>
    /// <returns>The filtered items.</returns>
    private IQueryable<InstanceTableRec>? GetFilteredItems()
    {
        if ((ResourceStore == null) ||
            (!ResourceStore.Any()))
        {
            return null;
        }

        // check for no filters
        if (string.IsNullOrWhiteSpace(_idFilter) &&
            string.IsNullOrWhiteSpace(_nameFilter) &&
            string.IsNullOrWhiteSpace(_urlFilter) &&
            string.IsNullOrWhiteSpace(_descriptionFilter) &&
            string.IsNullOrWhiteSpace(_identifierFilter))
        {
            return ResourceStore.GetInstanceTableView();
        }

        // apply filters
        return ResourceStore
            .GetInstanceTableView()
            .Where(tr => string.IsNullOrWhiteSpace(_idFilter) ? true : tr.Id.Contains(_idFilter, StringComparison.OrdinalIgnoreCase))
            .Where(tr => string.IsNullOrWhiteSpace(_nameFilter) ? true : tr.Name.Contains(_nameFilter, StringComparison.OrdinalIgnoreCase))
            .Where(tr => string.IsNullOrWhiteSpace(_urlFilter) ? true : tr.Url.Contains(_urlFilter, StringComparison.OrdinalIgnoreCase))
            .Where(tr => string.IsNullOrWhiteSpace(_descriptionFilter) ? true : tr.Description.Contains(_descriptionFilter, StringComparison.OrdinalIgnoreCase))
            .Where(tr => string.IsNullOrWhiteSpace(_identifierFilter) ? true : tr.Identifiers.Contains(_identifierFilter, StringComparison.OrdinalIgnoreCase))
            .AsQueryable<InstanceTableRec>();
    }

    private void HandleRowFocus(FluentDataGridRow<InstanceTableRec> row)
    {
        // _ = JsLogAsync($"Focused row item id: {row.Item?.Id}");

        if (AllowMultipleSelection)
        {
            if (row?.Item != null)
            {
                if (SelectedIds.Contains(row.Item.Id))
                {
                    SelectedIds.Remove(row.Item.Id);
                }
                else
                {
                    SelectedIds.Add(row.Item.Id);
                }
            }
        }
        else
        {
            SelectedIds.Clear();
            if (row?.Item != null)
            {
                SelectedIds.Add(row.Item.Id);
            }
        }

        SelectedIdsChanged.InvokeAsync(SelectedIds);

        // SelectedIds = SelectedIds.AsEnumerable<string>();
        StateHasChanged();
    }

    /// <summary>Logs an asynchronous.</summary>
    /// <param name="message">The message.</param>
    /// <returns>An asynchronous result.</returns>
    private async Task JsLogAsync(string message)
    {
        // note this has to be awaited or the call never happens
        await JS.InvokeVoidAsync("console.log", message);
    }

    /// <summary>Executes the search action.</summary>
    private void OnSearchChanged()
    {
        _filteredItems = GetFilteredItems();
        StateHasChanged();
    }

    private async void TimerElapsed_TickAsync(object? sender, EventArgs e)
    {
        CancelDebounce();
        await InvokeAsync(OnSearchChanged);
    }

    private void ResetDebounce()
    {
        if (debounceTimer != null)
        {
            debounceTimer.Enabled = false;
            debounceTimer.Elapsed -= TimerElapsed_TickAsync;
            debounceTimer.Dispose();
            debounceTimer = null;
        }

        debounceTimer = new(400);
        debounceTimer.Elapsed += TimerElapsed_TickAsync;
        debounceTimer.Enabled = true;
        debounceTimer.Start();
    }

    private void CancelDebounce()
    {
        if (debounceTimer != null)
        {
            debounceTimer.Enabled = false;
            debounceTimer.Elapsed -= TimerElapsed_TickAsync;
            debounceTimer.Dispose();
            debounceTimer = null;
        }
    }

    private void HandleFilterClear()
    {
        CancelDebounce();
        _ = InvokeAsync(OnSearchChanged);
    }

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        ResourceStore.OnInstanceCreated += ResourceStore_OnChanged;
        ResourceStore.OnInstanceUpdated += ResourceStore_OnChanged;
        ResourceStore.OnInstanceDeleted += ResourceStore_OnChanged;
        _filteredItems = GetFilteredItems();
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void ResourceStore_OnChanged(object? sender, EventArgs e)
    {
        _filteredItems = GetFilteredItems();
        _ = InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        debounceTimer?.Dispose();

        if (Store != null)
        {
        }

        if (ResourceStore != null)
        {
            ResourceStore.OnInstanceCreated -= ResourceStore_OnChanged;
            ResourceStore.OnInstanceUpdated -= ResourceStore_OnChanged;
            ResourceStore.OnInstanceDeleted -= ResourceStore_OnChanged;
        }
    }
}
