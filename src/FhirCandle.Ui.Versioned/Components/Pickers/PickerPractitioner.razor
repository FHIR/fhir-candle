@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IFhirStoreManager StoreManager

@implements IDisposable

@* <MudText Inline="true">Item: @_selectedItemText</MudText> *@

<MudTable 
        @ref="_displayTable"
        T="Hl7.Fhir.Model.Practitioner"
        Filter="new Func<Hl7.Fhir.Model.Practitioner, bool>(FilterFuncInstance)"
        Dense="true"
        MultiSelection="false"
        RowClass="cursor-pointer" 
        RowClassFunc="@SelectedRowClassFunc"
        Hover="true"
        SelectOnRowClick="true"
        OnRowClick="OnRowClick"
        Items="_resources">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Practitioners</MudText>
        <MudSpacer />
        <MudTooltip Text="Refresh Contents">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="HandleRefresh" />
        </MudTooltip>
        <MudTooltip Text="Toggle auto-refresh (10 seconds)">
            <MudSwitch Color="Color.Info" @bind-Checked="autoRefresh" Label="Auto-refresh" />
        </MudTooltip>
        <MudSpacer />
        <MudTextField @bind-Value="_resourceFilter"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0"
                      DebounceInterval="500"
                      OnDebounceIntervalElapsed="HandleFilterChange" />
    </ToolBarContent>
     <ColGroup>
        <col style="width: 30vw!important;" />
        <col style="width: 30vw!important;" />
        <col style="width: 30vw!important;" />
    </ColGroup>

    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Identifier</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@DisplayFor(context.Name)</MudTd>
        <MudTd DataLabel="Identifier">@DisplayFor(context.Identifier)</MudTd>
    </RowTemplate>
</MudTable>

@code {

    /// <summary>The FHIR store.</summary>
    [Parameter]
    public IFhirStore Store { get; set; } = null!;

    /// <summary>The resource store.</summary>
    [Parameter]
    public IResourceStore ResourceStore { get; set; } = null!;

    [Parameter]
    public string SelectedId { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> SelectedIdChanged { get; set; } 

    /// <summary>The display table.</summary>
    private MudTable<Hl7.Fhir.Model.Practitioner>? _displayTable = null;

    /// <summary>The elements.</summary>
    private IEnumerable<Hl7.Fhir.Model.Practitioner> _resources = Array.Empty<Hl7.Fhir.Model.Practitioner>();

    /// <summary>True to automatically refresh.</summary>
    private bool autoRefresh = true;

    /// <summary>The refresh timer.</summary>
    private System.Threading.Timer? _refreshTimer = null;

    /// <summary>Gets or sets the resource filter.</summary>
    private string _resourceFilter { get; set; } = string.Empty;

    private HashSet<Hl7.Fhir.Model.Practitioner> _selected = new();

    private string _selectedItemText = "Nothing selected";

    /// <summary>Filter function instance.</summary>
    /// <param name="patient">The patient.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncInstance(Hl7.Fhir.Model.Practitioner patient) => FilterFuncDefinition(patient, _resourceFilter);

    /// <summary>Filter function definition.</summary>
    /// <param name="id">          The identifier.</param>
    /// <param name="searchString">The search string.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncDefinition(Hl7.Fhir.Model.Practitioner p, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) ||
            p.Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    /// <summary>Selected row class function.</summary>
    /// <param name="item">     The item.</param>
    /// <param name="rowNumber">The row number.</param>
    /// <returns>A string.</returns>
    private string SelectedRowClassFunc(Hl7.Fhir.Model.Practitioner item, int rowNumber)
    {
        if (string.IsNullOrEmpty(SelectedId))
        {
            return string.Empty;
        }

        if (SelectedId.Equals(item?.Id ?? string.Empty))
        {
            return "selected";
        }

        return string.Empty;
    }

    /// <summary>Executes the row click action.</summary>
    /// <param name="args">The arguments.</param>
    async void OnRowClick(TableRowClickEventArgs<Hl7.Fhir.Model.Practitioner> args)
    {
        if (args.Item.Id.Equals(SelectedId))
        {
            _displayTable?.SetSelectedItem(null);
            _selectedItemText = "Nothing selected";
            SelectedId = string.Empty;
            await SelectedIdChanged.InvokeAsync(string.Empty);
            return;
        }

        _displayTable?.SetSelectedItem(args.Item);
        _selectedItemText = DisplayFor(args.Item);
        SelectedId = args.Item.Id;
        await SelectedIdChanged.InvokeAsync(SelectedId);
    }

    /// <summary>Displays for described by o.</summary>
    /// <param name="o">An object to process.</param>
    /// <returns>A string.</returns>
    private string DisplayFor(object o)
    {
        if (o == null)
        {
            return string.Empty;
        }

        switch (o)
        {
            case Hl7.Fhir.Model.Practitioner p:
                return $"{p.Id}: {string.Join(", ", p.Name.Select(n => $"{n.Family}, {string.Join(' ', n.Given)}"))}";

            case IEnumerable<Hl7.Fhir.Model.HumanName> hns:
                return string.Join(", ", hns.Select(hn => $"{hn.Family}, {string.Join(' ', hn.Given)}"));

            case Hl7.Fhir.Model.HumanName hn:
                return $"{hn.Family}, {string.Join(' ', hn.Given)}";

            case Hl7.Fhir.Model.FhirString s:
                return s.Value;

            case Hl7.Fhir.Model.Code c:
                return c.Value;

            case Hl7.Fhir.Model.Coding coding:
                return string.IsNullOrEmpty(coding.Display) ? $"{coding.System}|{coding.Code}" : coding.Display;

            case IEnumerable<Hl7.Fhir.Model.Identifier> ids:
                return string.Join(", ", ids.Select(id => DisplayFor(id)));

            case Hl7.Fhir.Model.Identifier i:
                {
                    if (!string.IsNullOrEmpty(i.System) || !string.IsNullOrEmpty(i.Value))
                    {
                        return $"{i.System}|{i.Value}";
                    }

                    if (i.Type != null)
                    {
                        return DisplayFor(i.Type);
                    }
                }
                break;

            case Hl7.Fhir.Model.ResourceReference rr:
                {
                    if (!string.IsNullOrEmpty(rr.Display))
                    {
                        return rr.Display;
                    }

                    if (!string.IsNullOrEmpty(rr.Reference))
                    {
                        return rr.Reference;
                    }

                    if (rr.Identifier != null)
                    {
                        DisplayFor(rr.Identifier);
                    }
                }
                break;

            case Hl7.Fhir.Model.CodeableConcept cc:
                {
                    if (!string.IsNullOrEmpty(cc.Text))
                    {
                        return cc.Text;
                    }

                    return string.Join(", ", cc.Coding.Select(c => string.IsNullOrEmpty(c.Display) ? $"{c.System}|{c.Code}" : c.Display));
                }

            case Hl7.Fhir.Model.Resource r:
                return r.TypeName + "/" + r.Id;
        }

        return o.ToString() ?? string.Empty;
    }

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        ResourceStore.OnChanged += ResourceStore_OnChanged;

        _resources = ResourceStore.Values.OrderBy(p => DisplayFor(((Hl7.Fhir.Model.Practitioner)p).Name)).Select(r => (Hl7.Fhir.Model.Practitioner)r);

        _refreshTimer = new Timer(
            TimerRefresh,
            null,
            TimeSpan.Zero,
            TimeSpan.FromSeconds(10));
    }

    /// <summary>Timer refresh.</summary>
    /// <param name="state">The state.</param>
    private void TimerRefresh(object? state)
    {
        if (autoRefresh)
        {
            HandleRefresh();
        }
    }

    /// <summary>Handles a user refresh request.</summary>
    private void HandleRefresh()
    {
        _resources = ResourceStore.Values.OrderBy(p => DisplayFor(((Hl7.Fhir.Model.Practitioner)p).Name)).Select(r => (Hl7.Fhir.Model.Practitioner)r);
        InvokeAsync(() => _displayTable?.UpdateSelection());
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void ResourceStore_OnChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Handles the filter change described by value.</summary>
    /// <param name="value">The value.</param>
    private void HandleFilterChange(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            _resourceFilter = string.Empty;
            InvokeAsync(() => _displayTable?.UpdateSelection());
            InvokeAsync(() => StateHasChanged());
            return;
        }

        _resourceFilter = value;
        InvokeAsync(() => _displayTable?.UpdateSelection());
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        _refreshTimer?.Change(Timeout.Infinite, 0);
        _refreshTimer?.Dispose();

        // if (_store != null)
        // {
        // }

        if (ResourceStore != null)
        {
            ResourceStore.OnChanged -= ResourceStore_OnChanged;
        }
    }
}
