@using Microsoft.FluentUI.AspNetCore.Components;

@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IFhirStoreManager StoreManager

@implements IDisposable

@* <FluentLabel Inline="true">Item: @_selectedItemText</FluentLabel> *@

<FluentLabel Typo="Typography.H6">Practitioners:</FluentLabel>
<FluentDataGrid Items="@FilteredItems" GridTemplateColumns="0.5fr 0.5fr 1fr" RowClass="@rowClass">
    <PropertyColumn Title="Id" Property="@(t => t.Id)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(IdFilter)" Tooltip="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch 
                    Autofocus="true"
                    @bind-Value="IdFilter"
                    @bind-Value:after="HandleFilterClear"
                    @oninput="@(e => IdFilter = e.Value?.ToString() ?? string.Empty)"
                    Placeholder="Resource ID..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <PropertyColumn Title="Name" Property="@(t => DisplayFor(t.Name))" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(NameFilter)" Tooltip="true" IsDefaultSortColumn="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch 
                    Autofocus="true"
                    @bind-Value="NameFilter"
                    @bind-Value:after="HandleFilterClear"
                    @oninput="@(e => NameFilter = e.Value?.ToString() ?? string.Empty)"
                    Placeholder="Name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <PropertyColumn Title="Identifier" Property="@(t => DisplayFor(t.Identifier))" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(IdentifierFilter)" Tooltip="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch 
                    Autofocus="true"
                    @bind-Value="IdentifierFilter"
                    @bind-Value:after="HandleFilterClear"
                    @oninput="@(e => IdentifierFilter = e.Value?.ToString() ?? string.Empty)"
                    Placeholder="Identifier..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
</FluentDataGrid>

@code {

    /// <summary>The FHIR store.</summary>
    [Parameter]
    public IFhirStore Store { get; set; } = null!;

    /// <summary>The resource store.</summary>
    [Parameter]
    public IResourceStore ResourceStore { get; set; } = null!;

    [Parameter]
    public string SelectedId { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> SelectedIdChanged { get; set; } 
    
    private System.Timers.Timer? debounceTimer = null;

    private IQueryable<Hl7.Fhir.Model.Practitioner>? _filteredItems = null;

    private IQueryable<Hl7.Fhir.Model.Practitioner>? FilteredItems => _filteredItems;

    private readonly HashSet<string> _selectedIds = new();

    private string? rowClass(Hl7.Fhir.Model.Practitioner p) => _selectedIds.Contains(p.Id) ? "highlighted-row" : null;
    // Func<Hl7.Fhir.Model.Practitioner, string?> rowClass = p => _selectedIds.Contains(p.Id) ? "highlighted-row" : null;
    // Func<Hl7.Fhir.Model.Practitioner, string?> rowStyle = p => _selectedIds.Contains(p.Id) ? "background-color: var(--highlight-bg);" : null;

    private string _idFilter = string.Empty;

    private string IdFilter
    {
        get => _idFilter;
        set
        {
            if (value != _idFilter)
            {
                _idFilter = value;
                ResetDebounce();
            }
        }
    }

    private string _nameFilter = string.Empty;

    private string NameFilter
    {
        get => _nameFilter;
        set
        {
            if (value != _nameFilter)
            {
                _nameFilter = value;
                ResetDebounce();
            }
        }
    }

    private string _identifierFilter = string.Empty;

    private string IdentifierFilter
    {
        get => _identifierFilter;
        set
        {
            if (value != _identifierFilter)
            {
                _identifierFilter = value;
                ResetDebounce();
            }
        }
    }

    private string _selectedItemText = "Nothing selected";
    
    /// <summary>Gets filtered items.</summary>
    /// <returns>The filtered items.</returns>
    private IQueryable<Hl7.Fhir.Model.Practitioner>? GetFilteredItems()
    {
        if ((ResourceStore == null) ||
            (!ResourceStore.Any()))
        {
            return null;
        }

        // check for no filters
        if (string.IsNullOrWhiteSpace(_idFilter) &&
            string.IsNullOrWhiteSpace(_nameFilter) &&
            string.IsNullOrWhiteSpace(_identifierFilter))
        {
            return ResourceStore
                .Values
                .Select(o => (Hl7.Fhir.Model.Practitioner)o)
                .AsQueryable<Hl7.Fhir.Model.Practitioner>();
        }

        // apply filters
        return ResourceStore
            .Values
            .Select(o => (Hl7.Fhir.Model.Practitioner)o)
            .Where(r => string.IsNullOrWhiteSpace(_idFilter) ? true : r.Id.Contains(_idFilter, StringComparison.OrdinalIgnoreCase))
            .Where(r => string.IsNullOrWhiteSpace(_nameFilter) ? true : TestNameFilter(r))
            .Where(r => string.IsNullOrWhiteSpace(_identifierFilter) ? true : TestIdentifierFilter(r))
            .AsQueryable<Hl7.Fhir.Model.Practitioner>();
    }

    private bool TestNameFilter(Hl7.Fhir.Model.Practitioner r)
    {
        if (string.IsNullOrWhiteSpace(_nameFilter))
        {
            return true;
        }

        return r.Name.Any(n => n.Family.Contains(_nameFilter, StringComparison.OrdinalIgnoreCase) || n.Given.Any(g => g.Contains(_nameFilter, StringComparison.OrdinalIgnoreCase)));
    }

    private bool TestIdentifierFilter(Hl7.Fhir.Model.Practitioner r)
    {
        if (string.IsNullOrWhiteSpace(_identifierFilter))
        {
            return true;
        }

        return r.Identifier.Any(i => i.Value.Contains(_identifierFilter, StringComparison.OrdinalIgnoreCase) || i.System.Contains(_identifierFilter, StringComparison.OrdinalIgnoreCase));
    }

    /// <summary>Executes the search action.</summary>
    private void OnSearchChanged()
    {
        _filteredItems = GetFilteredItems();
        StateHasChanged();
    }

    private async void TimerElapsed_TickAsync(object? sender, EventArgs e)
    {
        CancelDebounce();
        await InvokeAsync(OnSearchChanged);
    }

    private void ResetDebounce()
    {
        if (debounceTimer != null)
        {
            debounceTimer.Enabled = false;
            debounceTimer.Elapsed -= TimerElapsed_TickAsync;
            debounceTimer.Dispose();
            debounceTimer = null;
        }

        debounceTimer = new(400);
        debounceTimer.Elapsed += TimerElapsed_TickAsync;
        debounceTimer.Enabled = true;
        debounceTimer.Start();
    }

    private void CancelDebounce()
    {
        if (debounceTimer != null)
        {
            debounceTimer.Enabled = false;
            debounceTimer.Elapsed -= TimerElapsed_TickAsync;
            debounceTimer.Dispose();
            debounceTimer = null;
        }
    }

    private void HandleFilterClear()
    {
        CancelDebounce();
        _ = InvokeAsync(OnSearchChanged);
    }

    private void OnRowFocus(FluentDataGridRow<Hl7.Fhir.Model.Practitioner> row)
    {
        if (row?.Item != null)
        {
            _selectedIds.Add(row.Item.Id);
        }
    }

    // /// <summary>Selected row class function.</summary>
    // /// <param name="item">     The item.</param>
    // /// <param name="rowNumber">The row number.</param>
    // /// <returns>A string.</returns>
    // private string SelectedRowClassFunc(Hl7.Fhir.Model.Practitioner item, int rowNumber)
    // {
    //     if (string.IsNullOrEmpty(SelectedId))
    //     {
    //         return string.Empty;
    //     }

    //     if (SelectedId.Equals(item?.Id ?? string.Empty))
    //     {
    //         return "selected";
    //     }

    //     return string.Empty;
    // }

    // /// <summary>Executes the row click action.</summary>
    // /// <param name="args">The arguments.</param>
    // async void OnRowClick(TableRowClickEventArgs<Hl7.Fhir.Model.Practitioner> args)
    // {
    //     if (args.Item.Id.Equals(SelectedId))
    //     {
    //         _displayTable?.SetSelectedItem(null);
    //         _selectedItemText = "Nothing selected";
    //         SelectedId = string.Empty;
    //         await SelectedIdChanged.InvokeAsync(string.Empty);
    //         return;
    //     }

    //     _displayTable?.SetSelectedItem(args.Item);
    //     _selectedItemText = DisplayFor(args.Item);
    //     SelectedId = args.Item.Id;
    //     await SelectedIdChanged.InvokeAsync(SelectedId);
    // }

    /// <summary>Displays for described by o.</summary>
    /// <param name="o">An object to process.</param>
    /// <returns>A string.</returns>
    private string DisplayFor(object o)
    {
        if (o == null)
        {
            return string.Empty;
        }

        switch (o)
        {
            case Hl7.Fhir.Model.Practitioner p:
                return $"{p.Id}: {string.Join(", ", p.Name.Select(n => $"{n.Family}, {string.Join(' ', n.Given)}"))}";

            case IEnumerable<Hl7.Fhir.Model.HumanName> hns:
                return string.Join(", ", hns.Select(hn => $"{hn.Family}, {string.Join(' ', hn.Given)}"));

            case Hl7.Fhir.Model.HumanName hn:
                return $"{hn.Family}, {string.Join(' ', hn.Given)}";

            case Hl7.Fhir.Model.FhirString s:
                return s.Value;

            case Hl7.Fhir.Model.Code c:
                return c.Value;

            case Hl7.Fhir.Model.Coding coding:
                return string.IsNullOrEmpty(coding.Display) ? $"{coding.System}|{coding.Code}" : coding.Display;

            case IEnumerable<Hl7.Fhir.Model.Identifier> ids:
                return string.Join(", ", ids.Select(id => DisplayFor(id)));

            case Hl7.Fhir.Model.Identifier i:
                {
                    if (!string.IsNullOrEmpty(i.System) || !string.IsNullOrEmpty(i.Value))
                    {
                        return $"{i.System}|{i.Value}";
                    }

                    if (i.Type != null)
                    {
                        return DisplayFor(i.Type);
                    }
                }
                break;

            case Hl7.Fhir.Model.ResourceReference rr:
                {
                    if (!string.IsNullOrEmpty(rr.Display))
                    {
                        return rr.Display;
                    }

                    if (!string.IsNullOrEmpty(rr.Reference))
                    {
                        return rr.Reference;
                    }

                    if (rr.Identifier != null)
                    {
                        DisplayFor(rr.Identifier);
                    }
                }
                break;

            case Hl7.Fhir.Model.CodeableConcept cc:
                {
                    if (!string.IsNullOrEmpty(cc.Text))
                    {
                        return cc.Text;
                    }

                    return string.Join(", ", cc.Coding.Select(c => string.IsNullOrEmpty(c.Display) ? $"{c.System}|{c.Code}" : c.Display));
                }

            case Hl7.Fhir.Model.Resource r:
                return r.TypeName + "/" + r.Id;
        }

        return o.ToString() ?? string.Empty;
    }

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        ResourceStore.OnInstanceCreated += ResourceStore_OnChanged;
        ResourceStore.OnInstanceDeleted += ResourceStore_OnChanged;

        _filteredItems = GetFilteredItems();
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void ResourceStore_OnChanged(object? sender, EventArgs e)
    {
        // reset our filtered items
        _filteredItems = GetFilteredItems();
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        debounceTimer?.Dispose();

        // if (_store != null)
        // {
        // }

        if (ResourceStore != null)
        {
            ResourceStore.OnInstanceCreated -= ResourceStore_OnChanged;
            ResourceStore.OnInstanceDeleted -= ResourceStore_OnChanged;
        }
    }
}
