@using Microsoft.FluentUI.AspNetCore.Components;

<FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
    <FluentLabel Typo="Typography.Body">
        FHIR R4B endpoint at <code class="copy-click">@Store.Config.BaseUrl</code>
    </FluentLabel>

    @if (AdditionalContent != null)
    {
        <DynamicComponent Type="@AdditionalContent" Parameters="@_contentParams" />
    }

    @if (RiPages.Any())
    {
        <FluentLabel Typo="Typography.Body">
            Based on loaded packages, this server also implements the following pages:
        </FluentLabel>

        <table>
            <thead>
                <tr>
                    <th>Directive</th>
                    <th>Name</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach(PackagePageInfo info in RiPages.OrderBy(i => i.ContentFor))
                {
                    <tr>
                        <td>@info.ContentFor</td>
                        <td><FluentAnchor Href="@($"{info.RoutePath}?store={StoreName}")" Appearance="Appearance.Hypertext">@info.PageName</FluentAnchor></td>
                        <td>@info.Description</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <FluentLabel Typo="Typography.Body">
        This endpoint uses <FluentAnchor Href="https://hl7.org/fhir/R4B" Appearance="Appearance.Hypertext" Target="_blank">FHIR R4B</FluentAnchor>
        and Subscriptions via the
        <FluentAnchor Href="https://www.hl7.org/fhir/uv/subscriptions-backport/index.html" Appearance="Appearance.Hypertext" Target="_blank">Subscriptions Backport IG</FluentAnchor>
    </FluentLabel>
    
    <ul>
        <li>
            <FluentAnchor Href="@($"/store?store={StoreName}")" Appearance="Appearance.Hypertext">FHIR Contents</FluentAnchor>: 
            FHIR resources in this tenant
        </li>

        <li>
            <FluentAnchor Href="@($"/subscriptions/local?store={StoreName}")" Appearance="Appearance.Hypertext">Local Subscriptions</FluentAnchor>: 
            outgoing Subscription notifications from this server
        </li>

        <li>
            <FluentAnchor Href="@($"/subscriptions/notifications-received?store={StoreName}")" Appearance="Appearance.Hypertext">Received Notifications</FluentAnchor>: 
            incoming notifications received by this server
        </li>
    </ul>

    <FluentLabel Typo="Typography.Body">
        The endpoint also exposes a system-level operation, <code class="copy-click">@($"{Store.Config.BaseUrl}/$subscription-hook")</code>
        which can be used as a notification endpoint for FHIR @Store.Config.FhirVersion notifications (e.g.,
        if you are developing a server that sends notifications, you can point it here).
        Any received notification bundles are stored as resources locally, and the notifications will appear on
        the
        <FluentAnchor Href="@($"/subscriptions/notifications-received?store={StoreName}")" Appearance="Appearance.Hypertext">Received Notifications</FluentAnchor>
        page.
    </FluentLabel>

    <FluentLabel Typo="Typography.Body">
        Note that the server will NOT send notifications to addresses rooted in <code>example.org</code>.
        For example, a REST-Hook pointing at <code>http://example.org/endpoints/test</code> will trigger
        the notifications and be visible on the
        <FluentAnchor Href="@($"/subscriptions/local?store={StoreName}")" Appearance="Appearance.Hypertext">Local Subscriptions</FluentAnchor>
        page, but not actually attempt to send the notification to the endpoint.
    </FluentLabel>

</FluentStack>

@code {

    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    [Parameter]
    public string StoreName { get; set; } = string.Empty;

    [Parameter]
    public IFhirStore Store { get; set; } = null!;

    /// <summary>Gets or sets the name of the ri.</summary>
    [Parameter]
    public string RiName { get; set; } = string.Empty;

    /// <summary>Gets or sets the ri pages.</summary>
    [Parameter]
    public IEnumerable<PackagePageInfo> RiPages { get; set; } = Enumerable.Empty<PackagePageInfo>();

    /// <summary>Gets or sets the additional content.</summary>
    [Parameter]
    public Type? AdditionalContent { get; set; } = null;

    private Dictionary<string, object> _contentParams = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (AdditionalContent != null)
        {
            _contentParams.Add("StoreName", StoreName);
            _contentParams.Add("Store", Store);
        }
    }
}
