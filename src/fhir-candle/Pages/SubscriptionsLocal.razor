@page "/store/ext/subscriptions-local"

@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager

@implements IDisposable

<PageTitle>Local Subscriptions</PageTitle>

<MudGrid>
    @foreach (ParsedSubscription sub in _store?.CurrentSubscriptions ?? Array.Empty<ParsedSubscription>())
    {
    <MudItem>
        <MudBadge Content="@sub.GeneratedEvents.Count()" Color="@ColorForStatus(sub.CurrentStatus)" Overlap="true" Class="mx-6 my-4">
            <MudCard Outlined="true">
                <MudCardContent>
                    <MudField Label="Subscription">Subscription/@sub.Id</MudField>
                    <MudField Label="Topic">@sub.TopicUrl</MudField>
                    <MudField Label="Channel">@sub.ChannelCode</MudField>
                    <MudField Label="Endpoint">@sub.Endpoint</MudField>
                    @if (sub.GeneratedEvents.Any())
                    {
                        <MudField Label="Latest">
                            <MudLink Href="@($"/store/ext/subscriptions-viewer?store={StoreName}&id={sub.Id}")" Underline="Underline.Always">@HeaderFor(sub.GeneratedEvents.Last().Value)</MudLink>
                        </MudField>
                    }
                    @if (sub.NotificationErrors.Any())
                    {
                        <MudField Label="Error" Error="true">@sub.NotificationErrors.Last()</MudField>
                    }
                </MudCardContent>
            </MudCard>
        </MudBadge>
    </MudItem>
    }
</MudGrid>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    private IFhirStore _store = null!;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _store = StoreManager.ContainsKey(StoreName) ? StoreManager[StoreName] : null!;

        if (_store != null)
        {
            _store.OnChanged += Store_OnChanged;
            _store.OnSubscriptionSendEvent += Store_OnSubscriptionSendEvent;
            _store.OnSubscriptionsChanged += Store_OnSubscriptionsChanged;
        }

        // notify of store root in case user clicked here directly
        NavTracker?.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
        NavTracker?.NotifyNav($"Local Subscriptions", "/store/ext/subscriptions-local?store=" + StoreName, 2);
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/store/ext/subscriptions-local", StringComparison.Ordinal))
        {
            if (_store != null)
            {
                _store.OnChanged -= Store_OnChanged;
                _store.OnSubscriptionSendEvent -= Store_OnSubscriptionSendEvent;
                _store.OnSubscriptionsChanged -= Store_OnSubscriptionsChanged;
            }

            _store = StoreManager.ContainsKey(StoreName) ? StoreManager[StoreName] : null!;

            if (_store != null)
            {
                _store.OnChanged += Store_OnChanged;
                _store.OnSubscriptionSendEvent += Store_OnSubscriptionSendEvent;
                _store.OnSubscriptionsChanged += Store_OnSubscriptionsChanged;
            }

            // notify of store root in case user clicked here directly
            NavTracker?.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
            NavTracker?.NotifyNav($"Local Subscriptions", "/store/ext/subscriptions-local?store=" + StoreName, 2);
        }
    }

    /// <summary>Color for status.</summary>
    /// <param name="status">The status.</param>
    /// <returns>A Color.</returns>
    private Color ColorForStatus(string status)
    {
        switch (status)
        {
            case "requested":
                return Color.Info;

            case "active":
                return Color.Primary;

            case "error":
                return Color.Error;

            case "off":
                return Color.Dark;
        }

        return Color.Primary;
    }

    /// <summary>Header for.</summary>
    /// <param name="subEvent">The sub event.</param>
    /// <returns>A string.</returns>
    private string HeaderFor(SubscriptionEvent subEvent)
    {
        return $"{subEvent.EventNumber}: {subEvent.Timestamp.ToLocalTime().ToString("O")}...";
    }

    /// <summary>Event handler. Called by Store when a subscription changes.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Subscription event information.</param>
    private void Store_OnSubscriptionsChanged(object? sender, SubscriptionChangedEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Event handler. Called by Store for on subscription events.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Subscription event information.</param>
    private void Store_OnSubscriptionSendEvent(object? sender, SubscriptionSendEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void Store_OnChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        if (_store != null)
        {
            _store.OnChanged -= Store_OnChanged;
            _store.OnSubscriptionSendEvent -= Store_OnSubscriptionSendEvent;
            _store.OnSubscriptionsChanged -= Store_OnSubscriptionsChanged;
        }
    }
}

