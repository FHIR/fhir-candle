@page "/store/resource-list"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IFhirStoreManager StoreManager
@inject ProtectedLocalStorage BrowserStore

@implements IDisposable

<PageTitle>Resource List</PageTitle>

<MudTable Height="calc(100vh - (var(--mud-appbar-height) * 4.7))"
          @ref="_displayTable"
          Filter="new Func<string, bool>(FilterFuncInstance)"
          Dense="true"
          Striped="true"
          Items="_resourceStore.Keys">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@ResourceType Resources</MudText>
        <MudSpacer />
        <MudTooltip Text="Refresh Contents">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="HandleRefresh" />
        </MudTooltip>
        <MudTooltip Text="Toggle auto-refresh (10 seconds)">
            <MudSwitch Color="Color.Info" @bind-Checked="autoRefresh" Label="Auto-refresh" />
        </MudTooltip>
        <MudSpacer />
        <MudTextField @bind-Value="_resourceFilter"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0"
                      DebounceInterval="500"
                      OnDebounceIntervalElapsed="HandleFilterChange" />
    </ToolBarContent>
    <ColGroup>
        <col style="width: 10vw!important;" />
        <col style="width: 90vw!important;" />
    </ColGroup>
    <HeaderContent>
        <MudTh>&nbsp;</MudTh>
        <MudTh>Id</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd></MudTd>
        <MudTd DataLabel="Id">
            <MudLink Href="@($"/store/resource-viewer?store={StoreName}&type={ResourceType}&id={context}")" Underline="Underline.Always">@context</MudLink>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    /// <summary>Gets or sets the identifier of the resource.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public string ResourceType { get; set; } = "";

    /// <summary>The FHIR store.</summary>
    private IFhirStore _store = null!;

    /// <summary>The resource store.</summary>
    private IResourceStore _resourceStore = null!;

    /// <summary>The display table.</summary>
    private MudTable<string>? _displayTable = null;

    /// <summary>The elements.</summary>
    private IEnumerable<string> _elements = Array.Empty<string>();

    /// <summary>True to automatically refresh.</summary>
    private bool autoRefresh = true;

    /// <summary>The refresh timer.</summary>
    private System.Threading.Timer? _refreshTimer = null;

    /// <summary>Gets or sets the resource filter.</summary>
    private string _resourceFilter { get; set; } = string.Empty;

    /// <summary>Filter function instance.</summary>
    /// <param name="id">The identifier.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncInstance(string id) => FilterFuncDefinition(id, _resourceFilter);

    /// <summary>Filter function definition.</summary>
    /// <param name="id">          The identifier.</param>
    /// <param name="searchString">The search string.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncDefinition(string id, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) ||
            id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _store = StoreManager.ContainsKey(StoreName) ? StoreManager[StoreName] : null!;

        if ((_store != null) &&
            (!string.IsNullOrEmpty(ResourceType)) &&
            (_store.ContainsKey(ResourceType)))
        {
            _resourceStore = _store[ResourceType];
        }

        if (_resourceStore != null)
        {
            _resourceStore.OnChanged += ResourceStore_OnChanged;
        }

        _refreshTimer = new Timer(
            TimerRefresh,
            null,
            TimeSpan.Zero,
            TimeSpan.FromSeconds(10));

        // notify of store root in case user clicked here directly
        NavTracker?.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
        NavTracker?.NotifyNav(
            ResourceType,
            $"/store/resource-list?store={StoreName}&type={ResourceType}",
            2);

        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    /// <summary>Timer refresh.</summary>
    /// <param name="state">The state.</param>
    private void TimerRefresh(object? state)
    {
        if (autoRefresh)
        {
            HandleRefresh();
        }
    }

    /// <summary>Handles a user refresh request.</summary>
    private void HandleRefresh()
    {
        _displayTable?.UpdateSelection();
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/store/resource-editor", StringComparison.Ordinal))
        {
            if (_store != null)
            {
            }

            if (_resourceStore != null)
            {
                _resourceStore.OnChanged -= ResourceStore_OnChanged;
            }

            _store = StoreManager.ContainsKey(StoreName) ? StoreManager[StoreName] : null!;

            if (_store != null)
            {
                _resourceStore = _store[ResourceType];
            }

            if (_resourceStore != null)
            {
                _resourceStore.OnChanged += ResourceStore_OnChanged;
            }

            // notify of store root in case user clicked here directly
            NavTracker?.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
            NavTracker?.NotifyNav(
                ResourceType,
                $"/store/resource-list?store={StoreName}&type={ResourceType}",
                2);
        }
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void ResourceStore_OnChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Handles the filter change described by value.</summary>
    /// <param name="value">The value.</param>
    private void HandleFilterChange(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            _resourceFilter = string.Empty;
            _displayTable?.UpdateSelection();
            InvokeAsync(() => StateHasChanged());
            return;
        }

        _resourceFilter = value;
        _displayTable?.UpdateSelection();
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;

        _refreshTimer?.Change(Timeout.Infinite, 0);
        _refreshTimer?.Dispose();

        if (_store != null)
        {
        }

        if (_resourceStore != null)
        {
            _resourceStore.OnChanged -= ResourceStore_OnChanged;
        }
    }
}
