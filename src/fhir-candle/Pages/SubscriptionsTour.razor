@page "/store/ext/subscriptions-tour"

@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager

@implements IDisposable

<PageTitle>Subscriptions Tour</PageTitle>

<MudPaper Class="pa-4 ma-2" Square="true">
    <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Top">
        <MudTimelineItem Color="Color.Default">
            <ItemContent>
                <MudAlert Severity="Severity.Normal">Get/Select topic</MudAlert>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Default">
            <ItemContent>
                <MudAlert Severity="Severity.Normal">Determine patient (note this is specific to our topic)</MudAlert>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Default">
            <ItemContent>
                <MudAlert Severity="Severity.Normal">Request a subscription, set channel, endpoint, headers/parameters, and content choices.</MudAlert>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Default">
            <ItemContent>
                <MudAlert Severity="Severity.Normal">Wait on Handshake</MudAlert>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Default">
            <ItemContent>
                <MudAlert Severity="Severity.Normal">Post an Encounter to trigger the subscription</MudAlert>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Default">
            <ItemContent>
                <MudAlert Severity="Severity.Normal">Wait on notification</MudAlert>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Default">
            <ItemContent>
                <MudAlert Severity="Severity.Normal">Query for Events</MudAlert>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Default">
            <ItemContent>
                <MudAlert Severity="Severity.Normal">Clean up</MudAlert>
            </ItemContent>
        </MudTimelineItem>
@*        <MudTimelineItem Color="Color.Info">
            <ItemContent>
                <MudAlert Severity="Severity.Info">Info + Info</MudAlert>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Success">
            <ItemContent>
                <MudAlert Severity="Severity.Success">Success + Success</MudAlert>
            </ItemContent>
        </MudTimelineItem>
*@    </MudTimeline>
</MudPaper>

<MudPaper Class="pa-4 ma-2" Square="true">
    <MudText Typo="Typo.h6">Subscriptions Tour</MudText>
    <MudText Typo="Typo.body1">
        This page contains a tour of topic-based subscriptions in FHIR @_store.Config.FhirVersion .
    </MudText>
</MudPaper>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    private IFhirStore _store = null!;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if ((!string.IsNullOrEmpty(StoreName)) &&
            (StoreManager.TryGetValue(StoreName, out _store!)))
        {
            _store.OnChanged += Store_OnChanged;
            _store.OnSubscriptionSendEvent += Store_OnSubscriptionSendEvent;
            _store.OnSubscriptionsChanged += Store_OnSubscriptionsChanged;
        }

        // notify of store root in case user clicked here directly
        NavTracker?.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
        NavTracker?.NotifyNav($"Subscriptions Tour", "/store/ext/subscriptions-tour?store=" + StoreName, 2);
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/store/ext/subscriptions-tour", StringComparison.Ordinal))
        {
            if (_store != null)
            {
                _store.OnChanged -= Store_OnChanged;
                _store.OnSubscriptionSendEvent -= Store_OnSubscriptionSendEvent;
                _store.OnSubscriptionsChanged -= Store_OnSubscriptionsChanged;
            }

            if ((!string.IsNullOrEmpty(StoreName)) &&
                (StoreManager.TryGetValue(StoreName, out _store!)))
            {
                _store.OnChanged += Store_OnChanged;
                _store.OnSubscriptionSendEvent += Store_OnSubscriptionSendEvent;
                _store.OnSubscriptionsChanged += Store_OnSubscriptionsChanged;
            }

            // notify of store root in case user clicked here directly
            NavTracker?.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
            NavTracker?.NotifyNav($"Subscriptions Tour", "/store/ext/subscriptions-tour?store=" + StoreName, 2);
        }
    }

    /// <summary>Event handler. Called by Store when a subscription changes.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Subscription event information.</param>
    private void Store_OnSubscriptionsChanged(object? sender, SubscriptionChangedEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Event handler. Called by Store for on subscription events.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Subscription event information.</param>
    private void Store_OnSubscriptionSendEvent(object? sender, SubscriptionSendEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void Store_OnChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        if (_store != null)
        {
            _store.OnChanged -= Store_OnChanged;
            _store.OnSubscriptionSendEvent -= Store_OnSubscriptionSendEvent;
            _store.OnSubscriptionsChanged -= Store_OnSubscriptionsChanged;
        }
    }
}