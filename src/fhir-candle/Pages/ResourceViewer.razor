@page "/store/resource-viewer"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using BlazorMonaco
@using BlazorMonaco.Editor

@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IFhirStoreManager StoreManager
@inject ProtectedLocalStorage BrowserStore

@implements IDisposable

<PageTitle>Resource Editor</PageTitle>

<MudStack>
    <MudPaper>
        <MudGrid Spacing="2" Justify="Justify.FlexStart">
            <MudItem xs="2">
                <MudSelect T="ResourceFormatCodes"
                           Label="Format"
                           Value="@_resourceFormatCode"
                           ValueChanged="@OnUserFormatChanged"
                           FullWidth="false"
                           Variant="Variant.Outlined">
                    <MudSelectItem Value="@ResourceFormatCodes.JSON" />
                    <MudSelectItem Value="@ResourceFormatCodes.XML" />
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <StandaloneCodeEditor @ref="_editor"
        Id="resource-editor"
        ConstructionOptions="ResourceConstructorOptions"
        OnDidInit="EditorOnDidInit" />

</MudStack>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    /// <summary>Gets or sets the identifier of the resource.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public string ResourceType { get; set; } = "";

    /// <summary>Gets or sets the identifier of the resource.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string Id { get; set; } = "";

    /// <summary>The FHIR store.</summary>
    private IFhirStore _store = null!;

    /// <summary>The editor.</summary>
    private StandaloneCodeEditor? _editor = null;

    /// <summary>Values that represent resource format codes.</summary>
    private enum ResourceFormatCodes
    {
        JSON,
        XML,
    }

    /// <summary>The resource format code.</summary>
    private ResourceFormatCodes _resourceFormatCode { get; set; } = ResourceFormatCodes.JSON;

    /// <summary>Resource construction options.</summary>
    /// <param name="editor">The editor.</param>
    /// <returns>The StandaloneEditorConstructionOptions.</returns>
    private StandaloneEditorConstructionOptions ResourceConstructorOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "json",
                Theme = (NavTracker?.IsDarkMode ?? true) ? "vs-dark" : "vs-light",
                GlyphMargin = false,
                Value = "",
            };
    }

    /// <summary>Editor on did initialize.</summary>
    /// <returns>An asynchronous result.</returns>
    private async Task EditorOnDidInit()
    {
        await UpdateTheme();
        await JS.InvokeVoidAsync("setMonacoEditorResize", _editor!.Id);
        await LoadResourceContent();
    }

    /// <summary>Loads resource content.</summary>
    /// <returns>An asynchronous result.</returns>
    private async Task LoadResourceContent()
    {
        _ = _store.InstanceRead(
            ResourceType,
            Id,
            (_resourceFormatCode == ResourceFormatCodes.JSON) ? "application/fhir+json" : "application/fhir+xml",
            string.Empty,
            true,
            string.Empty,
            string.Empty,
            string.Empty,
            out string content,
            out _,
            out _,
            out _);

        // "virtual\u0022double\u0027single\u0060back"

        //await _editor!.SetValue(System.Text.RegularExpressions.Regex.Unescape(content));
        //await _editor!.SetValue(System.Text.RegularExpressions.Regex.Unescape(content.Replace("\u0022", "\"")));
        await _editor!.SetValue(content);
        //await _editor!.SetValue(content.Replace("\u0027", "'").Replace("\u0060", "`"));
    }

    /// <summary>Updates the theme.</summary>
    /// <returns>An asynchronous result.</returns>
    private async Task UpdateTheme()
    {
        if (_editor == null)
        {
            return;
        }

        await JS.InvokeVoidAsync(
            "blazorMonaco.editor.setTheme",
            (NavTracker?.IsDarkMode ?? true) ? "vs-dark" : "vs-light");
    }

    /// <summary>Sets hightlight language.</summary>
    private async Task SetHightlightLanguage()
    {
        if (_editor == null)
        {
            return;
        }

        // need to get the editor model uri
        TextModel tm = await _editor.GetModel();
        await JS.InvokeVoidAsync(
            "blazorMonaco.editor.setModelLanguage",
            tm.Uri,
            (_resourceFormatCode == ResourceFormatCodes.JSON) ? "json" : "xml");
    }

    private void OnUserFormatChanged(ResourceFormatCodes format)
    {
        _resourceFormatCode = format;
        UpdateContent();
    }

    /// <summary>Updates this object.</summary>
    private void UpdateContent()
    {
        _ = SetHightlightLanguage();
        _ = LoadResourceContent();
    }

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _store = StoreManager.ContainsKey(StoreName) ? StoreManager[StoreName] : null!;

        if (_store != null)
        {
        }

        if (NavTracker != null)
        {
            NavTracker.OnThemeChanged += NavTracker_OnThemeChanged;

            // notify of store root in case user clicked here directly
            NavTracker.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
            NavTracker.NotifyNav(
                ResourceType,
                $"/store/resource-list?store={StoreName}&type={ResourceType}",
                2);
            NavTracker.NotifyNav(
                Id,
                $"/store/resource-editor?store={StoreName}&type={ResourceType}&id={Id}",
                3);
        }

        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private void NavTracker_OnThemeChanged(object? sender, EventArgs e)
    {
        _ = UpdateTheme();
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/store/resource-editor", StringComparison.Ordinal))
        {
            if (_store != null)
            {
            }

            _store = StoreManager.ContainsKey(StoreName) ? StoreManager[StoreName] : null!;

            if (_store != null)
            {
            }

            if (NavTracker != null)
            {
                // notify of store root in case user clicked here directly
                NavTracker.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
                NavTracker.NotifyNav(
                    ResourceType,
                    $"/store/resource-list?store={StoreName}&type={ResourceType}",
                    2);
                NavTracker.NotifyNav(
                    Id,
                    $"/store/resource-editor?store={StoreName}&type={ResourceType}&id={Id}",
                    3);
            }
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;

        if (NavTracker != null)
        {
            NavTracker.OnThemeChanged -= NavTracker_OnThemeChanged;
        }

        if (_store != null)
        {
        }
    }
}

