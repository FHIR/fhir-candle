@using MudBlazor;

@page "/store"
@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager

@implements IDisposable

<PageTitle>FHIR Candle</PageTitle>

<MudTable @ref="_displayTable"
        Items="@_store.OrderBy(kvp => kvp.Key)"
        Filter="new Func<KeyValuePair<string, IResourceStore>, bool>(FilterFuncInstance)"
        Dense="true"
        Striped="true"
        Height="calc(100vh - (var(--mud-appbar-height) * 2))"
        FixedHeader="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">FHIR Resources: @StoreName</MudText>
        <MudSpacer />
        <MudSwitch Color="Color.Info" @bind-Checked="hideEmptyResources" Label="Hide empty" />
        <MudSpacer />
        <MudTooltip Text="Refresh Contents">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="HandleRefresh" />
        </MudTooltip>
        <MudTooltip Text="Toggle auto-refresh (10 seconds)">
            <MudSwitch Color="Color.Info" @bind-Checked="autoRefresh" Label="Auto-refresh" />
        </MudTooltip>
        <MudSpacer />
        <MudTextField @bind-Value="@resourceFilter" Label="Filter" DebounceInterval="100" OnDebounceIntervalElapsed="HandleResourceFilterChange" />
    </ToolBarContent>
    <ColGroup>
        <col style="width: 10vw!important;" />
        <col style="width: 50vw!important;" />
        <col style="width: 40vw!important;" />
    </ColGroup>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Resource Type</MudTh>
        <MudTh>Count</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd></MudTd>
        <MudTd DataLabel="Resource Type">
            <MudLink Href="@($"/store/resource-list?store={StoreName}&type={context.Key}")" Underline="Underline.Always">@context.Key</MudLink>
        </MudTd>
        <MudTd DataLabel="Count">@context.Value.Count</MudTd>
    </RowTemplate>
</MudTable>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    private IFhirStore _store = null!;

    /// <summary>The display table.</summary>
    private MudTable<KeyValuePair<string, IResourceStore>>? _displayTable = null;

    /// <summary>True to hide or false to show empty resources.</summary>
    private bool hideEmptyResources = true;

    /// <summary>True to automatically refresh.</summary>
    private bool autoRefresh = true;

    /// <summary>The refresh timer.</summary>
    private System.Threading.Timer? _refreshTimer = null;

    /// <summary>The resource search string.</summary>
    private string resourceFilter = string.Empty;

    private bool FilterFuncInstance(KeyValuePair<string, IResourceStore> kvp) => FilterFuncDefinition(kvp, resourceFilter);

    /// <summary>Filter function.</summary>
    /// <param name="e">A FhirElement to process.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncDefinition(KeyValuePair<string, IResourceStore> kvp, string searchString)
    {
        if (hideEmptyResources && (!kvp.Value.Any()))
        {
            return false;
        }

        if (string.IsNullOrEmpty(searchString))
        {
            return true;
        }

        return kvp.Key.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>Handles the filter change described by value.</summary>
    /// <param name="value">The value.</param>
    private void HandleResourceFilterChange(string value)
    {
        _displayTable?.UpdateSelection();
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if ((!string.IsNullOrEmpty(StoreName)) &&
            (StoreManager.TryGetValue(StoreName, out _store!)))
        {
            _store.OnChanged += Store_OnChanged;
        }

        _refreshTimer = new Timer(
            TimerRefresh,
            null,
            TimeSpan.Zero,
            TimeSpan.FromSeconds(10));

        NavTracker?.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
    }

    /// <summary>Timer refresh.</summary>
    /// <param name="state">The state.</param>
    private void TimerRefresh(object? state)
    {
        if (autoRefresh)
        {
            HandleRefresh();
        }
    }

    /// <summary>Handles a user refresh request.</summary>
    private void HandleRefresh()
    {
        try
        {
            _displayTable?.UpdateSelection();
            InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/store?", StringComparison.Ordinal))
        {
            if (_store != null)
            {
                _store.OnChanged -= Store_OnChanged;
            }

            if ((!string.IsNullOrEmpty(StoreName)) &&
                (StoreManager.TryGetValue(StoreName, out _store!)))
            {
                _store.OnChanged += Store_OnChanged;
            }

            NavTracker?.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
        }
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void Store_OnChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        _refreshTimer?.Change(Timeout.Infinite, 0);
        _refreshTimer?.Dispose();

        if (_store != null)
        {
            _store.OnChanged -= Store_OnChanged;
        }
    }
}
