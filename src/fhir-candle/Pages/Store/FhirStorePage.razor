@using Microsoft.FluentUI.AspNetCore.Components;

@page "/store"
@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager

@implements IDisposable

<PageTitle>FHIR Candle</PageTitle>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
    <FluentLabel Typo="Typography.H4">FHIR Resources: @StoreName</FluentLabel>

    <FluentSwitch Label="Hide Empty Resources" @bind-Value="HideEmptyResources"></FluentSwitch>

    <FluentDataGrid Items="@FilteredItems" GridTemplateColumns="1fr 1fr">
@*         <PropertyColumn Title="Resource Name" Property="@(ri => ri.ResourceName)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(ResourceNameFilter)" Tooltip="true"  IsDefaultSortColumn="true">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch 
                        Autofocus="true"
                        @bind-Value="ResourceNameFilter"
                        @bind-Value:after="HandleFilterClear"
                        @oninput="@(e => ResourceNameFilter = e.Value?.ToString() ?? string.Empty)"
                        Placeholder="Resource Name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
 *@
        <TemplateColumn Title="Resource Name" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(ResourceNameFilter)" Tooltip="true"  IsDefaultSortColumn="true">
            <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/store/resource-list?store={StoreName}&type={context.ResourceName}")">@context.ResourceName</FluentAnchor>
        </TemplateColumn>

        <PropertyColumn Title="Instance Count" Property="@(ri => ri.Count)" Sortable="true" Tooltip="true">
        </PropertyColumn>

    </FluentDataGrid>

</FluentStack>

@*
<MudTable @ref="_displayTable"
        Items="@_store.OrderBy(kvp => kvp.Key)"
        Filter="new Func<KeyValuePair<string, IResourceStore>, bool>(FilterFuncInstance)"
        Dense="true"
        Striped="true"
        Height="calc(100vh - (var(--mud-appbar-height) * 2))"
        FixedHeader="true">
    <ToolBarContent>
        <FluentLabel Typo="Typography.H6">FHIR Resources: @StoreName</FluentLabel>
        <MudSpacer />
        <MudSwitch Color="Color.Info" @bind-Checked="hideEmptyResources" Label="Hide empty" />
        <MudSpacer />
        <MudTooltip Text="Refresh Contents">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="HandleRefresh" />
        </MudTooltip>
        <MudTooltip Text="Toggle auto-refresh (10 seconds)">
            <MudSwitch Color="Color.Info" @bind-Checked="autoRefresh" Label="Auto-refresh" />
        </MudTooltip>
        <MudSpacer />
        <FluentTextField @bind-Value="@resourceFilter" Label="Filter" DebounceInterval="100" OnDebounceIntervalElapsed="HandleResourceFilterChange" />
    </ToolBarContent>
    <ColGroup>
        <col style="width: 10vw!important;" />
        <col style="width: 50vw!important;" />
        <col style="width: 40vw!important;" />
    </ColGroup>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Resource Type</MudTh>
        <MudTh>Count</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd></MudTd>
        <MudTd DataLabel="Resource Type">
            <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/store/resource-list?store={StoreName}&type={context.Key}")" >@context.Key</FluentAnchor>
        </MudTd>
        <MudTd DataLabel="Count">@context.Value.Count</MudTd>
    </RowTemplate>
</MudTable>
*@

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    private NavPageInfoRec[] _navPages => new NavPageInfoRec[]
    {
        new() { Display = StoreName, Link = "/store?store=" + StoreName },
    };

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    /// <summary>Information about the resource store.</summary>
    private record class ResourceStoreInfo
    {
        public string ResourceName { get; set; } = string.Empty;
        public int Count { get; set; }
    }

    private System.Timers.Timer? debounceTimer = null;

    private string _resourceNameFilter = string.Empty;

    private string ResourceNameFilter
    {
        get => _resourceNameFilter;
        set
        {
            if (value != _resourceNameFilter)
            {
                _resourceNameFilter = value;
                ResetDebounce();
            }
        }
    }

    IQueryable<ResourceStoreInfo>? _filteredItems = null;

    private IQueryable<ResourceStoreInfo>? FilteredItems => _filteredItems;

    private IFhirStore _store = null!;

    private bool _hideEmptyResources = true;

    /// <summary>True to hide or false to show empty resources.</summary>
    private bool HideEmptyResources
    {
        get => _hideEmptyResources;
        set
        {
            if (value != _hideEmptyResources)
            {
                _hideEmptyResources = value;
                _filteredItems = GetFilteredItems();
            }
        }
    }
    
    /// <summary>Gets filtered items.</summary>
    /// <returns>The filtered items.</returns>
    private IQueryable<ResourceStoreInfo>? GetFilteredItems()
    {
        if ((_store == null) ||
            (!_store.Any()))
        {
            return null;
        }

        // check for no filters
        if (string.IsNullOrWhiteSpace(_resourceNameFilter))
        {
            if (HideEmptyResources)
            {
                return _store
                    .Where(kvp => kvp.Value.Count > 0)
                    .Select(kvp => new ResourceStoreInfo(){ ResourceName = kvp.Key, Count = kvp.Value.Count })
                    .AsQueryable<ResourceStoreInfo>();
            }

            return _store
                .Select(kvp => new ResourceStoreInfo(){ ResourceName = kvp.Key, Count = kvp.Value.Count })
                .AsQueryable<ResourceStoreInfo>();
        }

        if (HideEmptyResources)
        {
            return _store
                .Where(kvp => kvp.Value.Count > 0)
                .Where(kvp => kvp.Key.Contains(_resourceNameFilter, StringComparison.OrdinalIgnoreCase))
                .Select(kvp => new ResourceStoreInfo(){ ResourceName = kvp.Key, Count = kvp.Value.Count })
                .AsQueryable<ResourceStoreInfo>();
        }

        // apply filters
        return _store
            .Where(kvp => kvp.Key.Contains(_resourceNameFilter, StringComparison.OrdinalIgnoreCase))
            .Select(kvp => new ResourceStoreInfo(){ ResourceName = kvp.Key, Count = kvp.Value.Count })
            .AsQueryable<ResourceStoreInfo>();
    }

    /// <summary>Executes the search action.</summary>
    private void OnSearchChanged()
    {
        _filteredItems = GetFilteredItems();
        StateHasChanged();
    }

    private async void TimerElapsed_TickAsync(object? sender, EventArgs e)
    {
        CancelDebounce();
        await InvokeAsync(OnSearchChanged);
    }

    private void ResetDebounce()
    {
        if (debounceTimer != null)
        {
            debounceTimer.Enabled = false;
            debounceTimer.Elapsed -= TimerElapsed_TickAsync;
            debounceTimer.Dispose();
            debounceTimer = null;
        }

        debounceTimer = new(400);
        debounceTimer.Elapsed += TimerElapsed_TickAsync;
        debounceTimer.Enabled = true;
        debounceTimer.Start();
    }

    private void CancelDebounce()
    {
        if (debounceTimer != null)
        {
            debounceTimer.Enabled = false;
            debounceTimer.Elapsed -= TimerElapsed_TickAsync;
            debounceTimer.Dispose();
            debounceTimer = null;
        }
    }

    private void HandleFilterClear()
    {
        CancelDebounce();
        _ = InvokeAsync(OnSearchChanged);
    }

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if ((!string.IsNullOrEmpty(StoreName)) &&
            (StoreManager.TryGetValue(StoreName, out _store!)))
        {
            _store.OnInstanceCreated += Store_OnChanged;
            _store.OnInstanceDeleted += Store_OnChanged;
        }

        _filteredItems = GetFilteredItems();

        NavTracker?.NotifyNav(_navPages);
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/store?", StringComparison.Ordinal))
        {
            if (_store != null)
            {
                _store.OnInstanceCreated -= Store_OnChanged;
                _store.OnInstanceDeleted -= Store_OnChanged;
            }

            if ((!string.IsNullOrEmpty(StoreName)) &&
                (StoreManager.TryGetValue(StoreName, out _store!)))
            {
                _store.OnInstanceCreated += Store_OnChanged;
                _store.OnInstanceDeleted += Store_OnChanged;
            }

            _filteredItems = GetFilteredItems();

            NavTracker?.NotifyNav(_navPages);
        }
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void Store_OnChanged(object? sender, EventArgs e)
    {
        _filteredItems = GetFilteredItems();
        _ = InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        debounceTimer?.Dispose();

        if (_store != null)
        {
            _store.OnInstanceCreated -= Store_OnChanged;
            _store.OnInstanceDeleted -= Store_OnChanged;
        }
    }
}
