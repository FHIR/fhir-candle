@page "/store/resource-viewer"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using BlazorMonaco
@using BlazorMonaco.Editor

@inject ServerConfiguration ServerConfig
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IFhirStoreManager StoreManager
@inject ProtectedLocalStorage BrowserStore

@implements IDisposable

<PageTitle>Resource Editor</PageTitle>

<MudStack>
    <MudPaper>
        <MudGrid Spacing="2" Justify="Justify.FlexStart" Style="align-items: center;">
            <MudItem xs="2">
                <MudSelect T="string"
                           Label="Format"
                           Value="@_resourceFormatCode"
                           ValueChanged="@OnUserFormatChanged"
                           FullWidth="false"
                           Variant="Variant.Outlined">
                    <MudSelectItem Value="@("json")">JSON</MudSelectItem>
                    <MudSelectItem Value="@("xml")">XML</MudSelectItem>
                </MudSelect>
            </MudItem>

            @switch (_store.Config.FhirVersion)
            {
                case TenantConfiguration.SupportedFhirVersions.R4:
                    <FhirCandle.Ui.R4.Components.FhirEditorLinks
                        BaseUrl="@_store.Config.BaseUrl"
                        ResourceType="@ResourceType"
                        Id="@Id"
                        FhirPathLabUrl="@ServerConfig.FhirPathLabUrl"
                        />
                    break;

                case TenantConfiguration.SupportedFhirVersions.R4B:
                    <FhirCandle.Ui.R4B.Components.FhirEditorLinks
                        BaseUrl="@_store.Config.BaseUrl"
                        ResourceType="@ResourceType"
                        Id="@Id"
                        FhirPathLabUrl="@ServerConfig.FhirPathLabUrl"
                        />
                    break;

                case TenantConfiguration.SupportedFhirVersions.R5:
                    <FhirCandle.Ui.R5.Components.FhirEditorLinks
                        BaseUrl="@_store.Config.BaseUrl"
                        ResourceType="@ResourceType"
                        Id="@Id"
                        FhirPathLabUrl="@ServerConfig.FhirPathLabUrl"
                        />
                    break;
            }

        </MudGrid>
    </MudPaper>

    <FhirCandle.Ui.Common.Components.FhirEditor
        Language="@_resourceFormatCode"
        EditorContent="@_resourceContent"
        />

</MudStack>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    /// <summary>Gets or sets the identifier of the resource.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public string ResourceType { get; set; } = "";

    /// <summary>Gets or sets the identifier of the resource.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string Id { get; set; } = "";

    /// <summary>The FHIR store.</summary>
    private IFhirStore _store = null!;

    /// <summary>The resource format code.</summary>
    private string _resourceFormatCode { get; set; } = "json";

    private string _resourceContent { get; set; } = "";

    /// <summary>Loads resource content.</summary>
    private void LoadResourceContent()
    {
        string content;

        // check for needing to generate metadata
        if (ResourceType.Equals("CapabilityStatement", StringComparison.Ordinal) &&
            Id.Equals("metadata", StringComparison.Ordinal))
        {
            _ = _store.GetMetadata(
                null,
                $"application/fhir+{_resourceFormatCode}",
                true,
                out content,
                out _,
                out _,
                out _);
        }
        else
        {
            _ = _store.InstanceRead(
                null,
                ResourceType,
                Id,
                $"application/fhir+{_resourceFormatCode}",
                string.Empty,
                true,
                string.Empty,
                string.Empty,
                string.Empty,
                out content,
                out _,
                out _,
                out _);
        }

        _resourceContent = content;
    }

    private void OnUserFormatChanged(string format)
    {
        _resourceFormatCode = format;
        UpdateContent();
    }

    /// <summary>Updates this object.</summary>
    private void UpdateContent()
    {
        LoadResourceContent();
    }

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if ((!string.IsNullOrEmpty(StoreName)) &&
            (StoreManager.TryGetValue(StoreName, out _store!)))
        {
        }

        if (NavTracker != null)
        {
            // notify of store root in case user clicked here directly
            NavTracker.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
            NavTracker.NotifyNav(
                ResourceType,
                $"/store/resource-list?store={StoreName}&type={ResourceType}",
                2);
            NavTracker.NotifyNav(
                Id,
                $"/store/resource-editor?store={StoreName}&type={ResourceType}&id={Id}",
                3);
        }

        NavigationManager.LocationChanged += HandleLocationChanged;

        LoadResourceContent();
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/store/resource-editor", StringComparison.Ordinal))
        {
            if (_store != null)
            {
            }

            if ((!string.IsNullOrEmpty(StoreName)) &&
                (StoreManager.TryGetValue(StoreName, out _store!)))
            {
            }

            if (NavTracker != null)
            {
                // notify of store root in case user clicked here directly
                NavTracker.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
                NavTracker.NotifyNav(
                    ResourceType,
                    $"/store/resource-list?store={StoreName}&type={ResourceType}",
                    2);
                NavTracker.NotifyNav(
                    Id,
                    $"/store/resource-editor?store={StoreName}&type={ResourceType}&id={Id}",
                    3);
            }

            LoadResourceContent();
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;

        if (_store != null)
        {
        }
    }
}

