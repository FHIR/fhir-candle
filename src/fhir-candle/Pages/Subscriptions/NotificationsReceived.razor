@using Microsoft.FluentUI.AspNetCore.Components;

@page "/subscriptions/notifications-received"

@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager

@implements IDisposable

<PageTitle>Received Notifications</PageTitle>

<FluentGrid Spacing="4">
    @foreach (KeyValuePair<string, List<ParsedSubscriptionStatus>> kvp in _store?.ReceivedNotifications.AsEnumerable() ?? Array.Empty<KeyValuePair<string, List<ParsedSubscriptionStatus>>>())
    {
        <FluentGridItem xs="12">
            <FluentCounterBadge Count="@kvp.Value.Count()" Appearance="Appearance.Accent">
                <FluentCard>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                        <FluentTextField Label="Subscription" ReadOnly="true">@kvp.Key</FluentTextField>
                        @if (kvp.Value.Any() && (kvp.Value.Last() is ParsedSubscriptionStatus status))
                        {
                            <FluentTextField Label="Topic" ReadOnly="true">@status.SubscriptionTopicCanonical</FluentTextField>
                            <FluentTextField Label="Local Bundle" ReadOnly="true">Bundle/@status.BundleId</FluentTextField>
                            <FluentTextField Label="Received" ReadOnly="true">@status.ProcessedDateTime.ToString("o")</FluentTextField>
                            <FluentTextField Label="Type" ReadOnly="true">@status.NotificationType</FluentTextField>

                            <FluentLabel Typo="Typography.Body">Recevied Event Details</FluentLabel>
                            <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/subscriptions/notification-received-viewer?store={StoreName}&ref={kvp.Key}")" >Received Events</FluentAnchor>
    
                            @if (status.NotificationEvents.Any())
                            {
                                <FluentTextField Label="Focus" ReadOnly="true">@status.NotificationEvents.First().FocusReference</FluentTextField>
                            }

                            @if (status.Errors.Any())
                            {
                                <FluentTextField Label="Error" ReadOnly="true">@status.Errors.First()</FluentTextField>
                            }
                        }
                    </FluentStack>
                </FluentCard>
            </FluentCounterBadge>
        </FluentGridItem>
    }
</FluentGrid>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    private IFhirStore _store = null!;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if ((!string.IsNullOrEmpty(StoreName)) &&
            (StoreManager.TryGetValue(StoreName, out _store!)))
        {
            _store.OnReceivedSubscriptionChanged += Store_OnReceivedSubscriptionChanged;
            _store.OnReceivedSubscriptionEvent += Store_OnReceivedSubscriptionEvent;
        }

        // notify of store root in case user clicked here directly
        NavTracker?.NotifyNav(StoreName, "/store?storeName=" + StoreName, 1);
        NavTracker?.NotifyNav($"Received Notifications", "/subscriptions/notifications-received?store=" + StoreName, 2);
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/subscriptions/notifications-received", StringComparison.Ordinal))
        {
            if (_store != null)
            {
                _store.OnInstanceCreated -= Store_OnChanged;
                _store.OnInstanceDeleted -= Store_OnChanged;
                _store.OnReceivedSubscriptionChanged -= Store_OnReceivedSubscriptionChanged;
                _store.OnReceivedSubscriptionEvent -= Store_OnReceivedSubscriptionEvent;
            }

            if ((!string.IsNullOrEmpty(StoreName)) &&
                (StoreManager.TryGetValue(StoreName, out _store!)))
            {
                _store.OnInstanceCreated += Store_OnChanged;
                _store.OnInstanceDeleted += Store_OnChanged;
                _store.OnReceivedSubscriptionChanged += Store_OnReceivedSubscriptionChanged;
                _store.OnReceivedSubscriptionEvent += Store_OnReceivedSubscriptionEvent;
            }

            // notify of store root in case user clicked here directly
            NavTracker?.NotifyNav(StoreName, "/store?store=" + StoreName, 1);
            NavTracker?.NotifyNav($"Received Notifications", "/subscriptions/notifications-received?store=" + StoreName, 2);
        }
    }

    /// <summary>Header for.</summary>
    /// <param name="subEvent">The sub event.</param>
    /// <returns>A string.</returns>
    private string HeaderFor(SubscriptionEvent subEvent)
    {
        return $"{subEvent.EventNumber}: {subEvent.Timestamp.ToLocalTime().ToString("u")}...";
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void Store_OnChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Event handler. Called by Store for on received subscription changed events.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Received subscription changed event information.</param>
    private void Store_OnReceivedSubscriptionChanged(object? sender, ReceivedSubscriptionChangedEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Event handler. Called by Store for on received subscription events.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Received subscription event information.</param>
    private void Store_OnReceivedSubscriptionEvent(object? sender, ReceivedSubscriptionEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        if (_store != null)
        {
            _store.OnInstanceCreated -= Store_OnChanged;
            _store.OnInstanceDeleted -= Store_OnChanged;
            _store.OnReceivedSubscriptionChanged -= Store_OnReceivedSubscriptionChanged;
            _store.OnReceivedSubscriptionEvent -= Store_OnReceivedSubscriptionEvent;
        }
    }
}

