@using Microsoft.FluentUI.AspNetCore.Components;

@page "/subscriptions/notification-received-viewer"

@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager

@implements IDisposable

<PageTitle>Received Subscription Events</PageTitle>

<FluentGrid Spacing="4">
    @foreach (ParsedSubscriptionStatus status in _notifications ?? Array.Empty<ParsedSubscriptionStatus>().ToList())
    {
        <FluentGridItem xs="12">
            <FluentCard>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentTextField Label="Subscription" ReadOnly="true">@status.SubscriptionReference</FluentTextField>
                    <FluentTextField Label="Topic" ReadOnly="true">@status.SubscriptionTopicCanonical</FluentTextField>
                    <FluentTextField Label="Local Bundle" ReadOnly="true">Bundle/@status.BundleId</FluentTextField>
                    <FluentTextField Label="Received" ReadOnly="true">@status.ProcessedDateTime.ToString("o")</FluentTextField>
                    <FluentTextField Label="Type" ReadOnly="true">@status.NotificationType</FluentTextField>

                    <FluentLabel Typo="Typography.Body">Bundle</FluentLabel>
                    <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/store/resource-viewer?store={StoreName}&type=Bundle&id={status.BundleId}")">Bundle/@status.BundleId</FluentAnchor>

                    @if (status.NotificationEvents.Any())
                    {
                        @foreach (ParsedSubscriptionStatus.ParsedNotificationEvent ne in status.NotificationEvents)
                        {
                            <FluentTextField Label="Event Number" ReadOnly="true">@ne.EventNumber</FluentTextField>
                            <FluentTextField Label="Timestamp" ReadOnly="true">@ne.Timestamp?.ToLocalTime().ToString("O")</FluentTextField>
                            <FluentTextField Label="Focus Reference" ReadOnly="true">@ne.FocusReference</FluentTextField>
                            <FluentTextField Label="Additional Context" ReadOnly="true">@string.Join(", ", ne.AdditionalContextReferences ?? Array.Empty<string>())</FluentTextField>
                        }
                    }

                    @if (status.Errors.Any())
                    {
                        <FluentTextField Label="Error" ReadOnly="true">@status.Errors.First()</FluentTextField>
                    }
                </FluentStack>
            </FluentCard>
        </FluentGridItem>
    }
</FluentGrid>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "ref")]
    public string SubscriptionRef { get; set; } = "";

    private IFhirStore _store = null!;

    private List<ParsedSubscriptionStatus> _notifications = null!;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if ((!string.IsNullOrEmpty(StoreName)) &&
            (StoreManager.TryGetValue(StoreName, out _store!)))
        {
            _store.OnReceivedSubscriptionEvent += Store_OnReceivedSubscriptionEvent;

            if (!string.IsNullOrEmpty(SubscriptionRef))
            {
                _ = _store.ReceivedNotifications.TryGetValue(SubscriptionRef, out _notifications!);
            }
        }

        // notify of store root in case user clicked here directly
        NavTracker?.NotifyNav($"Received Subscription Events", $"/subscriptions/notification-received-viewer?store={StoreName}&ref={SubscriptionRef}", 3);
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/subscriptions/notification-received-viewer", StringComparison.Ordinal))
        {
            if (_store != null)
            {
                _store.OnReceivedSubscriptionEvent -= Store_OnReceivedSubscriptionEvent;
            }

            if ((!string.IsNullOrEmpty(StoreName)) &&
                (StoreManager.TryGetValue(StoreName, out _store!)))
            {
                _store.OnReceivedSubscriptionEvent += Store_OnReceivedSubscriptionEvent;
            }

            // notify of store root in case user clicked here directly
            NavTracker?.NotifyNav($"Received Subscription Events", $"/subscriptions/notification-received-viewer?store={StoreName}&ref={SubscriptionRef}", 3);
        }
    }

    /// <summary>Event handler. Called by Store for on subscription events.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Subscription event information.</param>
    private void Store_OnReceivedSubscriptionEvent(object? sender, ReceivedSubscriptionEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        if (_store != null)
        {
            _store.OnReceivedSubscriptionEvent -= Store_OnReceivedSubscriptionEvent;
        }
    }

}
