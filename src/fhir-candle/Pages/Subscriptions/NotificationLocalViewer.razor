@using Microsoft.FluentUI.AspNetCore.Components;

@page "/subscriptions/notification-local-viewer"

@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager

@implements IDisposable

<PageTitle>Generated Subscription Events</PageTitle>

<FluentGrid Spacing="4">
    @foreach (SubscriptionEvent subEvent in _subscription?.GeneratedEvents.Values.AsEnumerable() ?? Array.Empty<SubscriptionEvent>())
    {
        <FluentGridItem xs="12">
            <FluentCard>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentTextField Label="Subscription" ReadOnly="true">Subscription/@subEvent.SubscriptionId</FluentTextField>
                    <FluentTextField Label="Topic" ReadOnly="true">@subEvent.TopicUrl</FluentTextField>
                    <FluentTextField Label="Event Number" ReadOnly="true">@subEvent.EventNumber</FluentTextField>
                    <FluentTextField Label="Received" ReadOnly="true">@subEvent.Timestamp.ToLocalTime().ToString("o")</FluentTextField>
                    <FluentTextField Label="Status At Generation" ReadOnly="true">@subEvent.StatusAtGeneration</FluentTextField>

                    @if ((subEvent.Focus != null) && 
                         (_store.TryGetResourceInfo(subEvent.Focus, out string rn, out string id)))
                    {
                        <FluentLabel Typo="Typography.Body">Focus</FluentLabel>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/store/resource-viewer?store={StoreName}&type={rn}&id={id}")">@rn/@id</FluentAnchor>
                    }

                    @if (subEvent.AdditionalContext?.Any() ?? false)
                    {
                        @foreach (object ac in subEvent.AdditionalContext)
                        {
                            @if (_store.TryGetResourceInfo(ac, out string acN, out string acId))
                            {
                                <FluentLabel Typo="Typography.Body">Additional Context</FluentLabel>
                                <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/store/resource-viewer?store={StoreName}&type={acN}&id={acId}")" >@acN/@acId</FluentAnchor>
                            }
                        }
                    }

@*                     @if (_subscription?.SerializedEvents.TryGetValue(subEvent.EventNumber, out string? content) == true)
                    {
                        <FluentTextField Label="Content">
                            <FluentLabel Typo="Typography.Body2">@content</FluentLabel>
                        </FluentTextField>
                    }
 *@
                </FluentStack>
            </FluentCard >
        </FluentGridItem>
    }
</FluentGrid>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string SubscriptionId { get; set; } = "";

    private IFhirStore _store = null!;

    private ParsedSubscription? _subscription = null;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if ((!string.IsNullOrEmpty(StoreName)) &&
            (StoreManager.TryGetValue(StoreName, out _store!)))
        {
            _store.OnSubscriptionSendEvent += Store_OnSubscriptionSendEvent;

            if ((!string.IsNullOrEmpty(SubscriptionId)) &&
                (_store.CurrentSubscriptions.Any()))
            {
                _subscription = _store.CurrentSubscriptions.Where(s => s.Id.Equals(SubscriptionId, StringComparison.Ordinal)).First() ?? null!;
            }
        }

        // notify of store root in case user clicked here directly
        NavTracker?.NotifyNav($"Generated Subscription Events", $"/subscriptions/notification-local-viewer?store={StoreName}&id={SubscriptionId}", 3);
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/subscriptions/notification-local-viewer", StringComparison.Ordinal))
        {
            if (_store != null)
            {
                _store.OnSubscriptionSendEvent -= Store_OnSubscriptionSendEvent;
            }

            if ((!string.IsNullOrEmpty(StoreName)) &&
                (StoreManager.TryGetValue(StoreName, out _store!)))
            {
                _store.OnSubscriptionSendEvent += Store_OnSubscriptionSendEvent;

                if ((!string.IsNullOrEmpty(SubscriptionId)) &&
                    (_store.CurrentSubscriptions.Any()))
                {
                    _subscription = _store.CurrentSubscriptions.Where(s => s.Id.Equals(SubscriptionId, StringComparison.Ordinal)).First() ?? null!;
                }
            }

            // notify of store root in case user clicked here directly
            NavTracker?.NotifyNav($"Generated Subscription Events", $"/subscriptions/notification-local-viewer?store={StoreName}&id={SubscriptionId}", 3);
        }
    }

    /// <summary>Event handler. Called by Store for on subscription events.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Subscription event information.</param>
    private void Store_OnSubscriptionSendEvent(object? sender, SubscriptionSendEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        if (_store != null)
        {
            _store.OnSubscriptionSendEvent -= Store_OnSubscriptionSendEvent;
        }
    }
}
