@using Microsoft.FluentUI.AspNetCore.Components;

@page "/subscriptions/local"

@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager

@implements IDisposable

<PageTitle>Local Subscriptions</PageTitle>

@if (!_store?.CurrentSubscriptions.Any() ?? false)
{
    <FluentLabel Typo="Typography.Body">No local subscriptions found for this store.</FluentLabel>
}
else
{
    <FluentGrid Spacing="4">
        @foreach (ParsedSubscription sub in _store!.CurrentSubscriptions)
        {
            <FluentGridItem Style="min-width: var(--field-container-min-width);">
                <FluentCounterBadge Count="@sub.GeneratedEvents.Count()" Appearance="Appearance.Accent" BottomPosition="97" HorizontalPosition="97" Max="999">
                <FluentCard>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                        <FluentLabel Typo="Typography.Body">Subscription</FluentLabel>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/store/resource-viewer?store={StoreName}&type=Subscription&id={sub.Id}")">Subscription/@sub.Id</FluentAnchor>

                        <FluentTextField Label="Topic" ReadOnly="true" Value="@sub.TopicUrl"/>
                        <FluentTextField Label="Channel" ReadOnly="true" Value="@sub.ChannelCode"/>
                        <FluentTextField Label="Endpoint" ReadOnly="true" Value="@sub.Endpoint"/>

                        <FluentLabel Typo="Typography.Body">Generated Event Details</FluentLabel>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/subscriptions/notification-local-viewer?store={StoreName}&id={sub.Id}")">Generated Events</FluentAnchor>

                        @if (sub.GeneratedEvents.Any())
                        {
                            <FluentTextField Label="Latest" ReadOnly="true" Value="@HeaderFor(sub.GeneratedEvents.Last().Value)"/>
                        }
                        @if (sub.NotificationErrors.Any())
                        {
                            <FluentTextField Label="Error" Error="true" ReadOnly="true" Value="@sub.NotificationErrors.Last()"/>
                        }
                    </FluentStack>
                </FluentCard>
                </FluentCounterBadge>
            </FluentGridItem>
        }
    </FluentGrid>
}

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    private NavPageInfoRec[] _navPages => new NavPageInfoRec[]
    {
        new() { Display = StoreName, Link = "/store?store=" + StoreName },
        new() { Display = "Local Subscriptions", Link = "/subscriptions/local?store=" + StoreName },
    };

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    private IFhirStore _store = null!;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if ((!string.IsNullOrEmpty(StoreName)) &&
            (StoreManager.TryGetValue(StoreName, out _store!)))
        {
            _store.OnInstanceCreated += Store_OnChanged;
            _store.OnInstanceDeleted += Store_OnChanged;
            _store.OnSubscriptionSendEvent += Store_OnSubscriptionSendEvent;
            _store.OnSubscriptionsChanged += Store_OnSubscriptionsChanged;
        }

        // notify of store root in case user clicked here directly
        NavTracker?.NotifyNav(_navPages);
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/subscriptions/local", StringComparison.Ordinal))
        {
            if (_store != null)
            {
                _store.OnInstanceCreated -= Store_OnChanged;
                _store.OnInstanceDeleted -= Store_OnChanged;
                _store.OnSubscriptionSendEvent -= Store_OnSubscriptionSendEvent;
                _store.OnSubscriptionsChanged -= Store_OnSubscriptionsChanged;
            }

            if ((!string.IsNullOrEmpty(StoreName)) &&
                (StoreManager.TryGetValue(StoreName, out _store!)))
            {
                _store.OnInstanceCreated += Store_OnChanged;
                _store.OnInstanceDeleted += Store_OnChanged;
                _store.OnSubscriptionSendEvent += Store_OnSubscriptionSendEvent;
                _store.OnSubscriptionsChanged += Store_OnSubscriptionsChanged;
            }

            // notify of store root in case user clicked here directly
            NavTracker?.NotifyNav(_navPages);
        }
    }

    /// <summary>Header for.</summary>
    /// <param name="subEvent">The sub event.</param>
    /// <returns>A string.</returns>
    private string HeaderFor(SubscriptionEvent subEvent)
    {
        return $"{subEvent.EventNumber}: {subEvent.Timestamp.ToLocalTime().ToString("O")}...";
    }

    /// <summary>Event handler. Called by Store when a subscription changes.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Subscription event information.</param>
    private void Store_OnSubscriptionsChanged(object? sender, SubscriptionChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    /// <summary>Event handler. Called by Store for on subscription events.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Subscription event information.</param>
    private void Store_OnSubscriptionSendEvent(object? sender, SubscriptionSendEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void Store_OnChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        if (_store != null)
        {
            _store.OnInstanceCreated -= Store_OnChanged;
            _store.OnInstanceDeleted -= Store_OnChanged;
            _store.OnSubscriptionSendEvent -= Store_OnSubscriptionSendEvent;
            _store.OnSubscriptionsChanged -= Store_OnSubscriptionsChanged;
        }
    }
}

