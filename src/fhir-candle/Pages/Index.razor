@using FhirCandle.Configuration
@using Microsoft.FluentUI.AspNetCore.Components;

@page "/"

@using fhir.candle.Components;
@using fhir.candle.Models;

@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager
@inject CandleConfig ServerConfig
@inject IJSRuntime JS

@implements IDisposable

<FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
@*     <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">
        <FluentIcon Value="@(new Icons.Regular.Size24.Warning())" Color="@Color.Warning" />
        <FluentLabel Color="@Color.Warning">
            This is an open FHIR endpoint for development, testing, and educational purposes only.
            Uploading real patient data is strictly prohibited.
        </FluentLabel>
    </FluentStack>
 *@
    <FluentMessageBar Title="Development Server" Intent="@MessageIntent.Warning" AllowDismiss="false">
        This is an open FHIR endpoint for development, testing, and educational purposes only.
        Uploading real patient data is strictly prohibited.
    </FluentMessageBar>   

    @if (!string.IsNullOrEmpty(ServerConfig.ReferenceImplementation))
    {
        <FluentLabel Typo="Typography.H6">Reference Implementation</FluentLabel>
        <FluentLabel Typo="Typography.Body">
            Note that this server is configured to be a reference implementation (RI) for @ServerConfig.ReferenceImplementation .
        </FluentLabel>
    }

    @if (StoreManager.Count() == 1)
    {
        <FluentLabel Typo="Typography.H6">FHIR Endpoint Information</FluentLabel>

        @switch (StoreManager.First().Value.Config.FhirVersion)
        {
            case FhirReleases.FhirSequenceCodes.R4:
                <fhir.candle.Components.FhirStoreTileR4 
                    StoreName="@StoreManager.First().Key" 
                    Store="@StoreManager.First().Value"
                    RiName="@ServerConfig.ReferenceImplementation"
                    RiPages="@StoreManager.AdditionalPagesByTenant[StoreManager.First().Key]"
                    AdditionalContent="@_contentR4"
                    />
                break;

            case FhirReleases.FhirSequenceCodes.R4B:
                <fhir.candle.Components.FhirStoreTileR4B
                    StoreName="@StoreManager.First().Key" 
                    Store="@StoreManager.First().Value"
                    RiName="@ServerConfig.ReferenceImplementation"
                    RiPages="@StoreManager.AdditionalPagesByTenant[StoreManager.First().Key]"
                    AdditionalContent="@_contentR4B"
                    />
                break;

            case FhirReleases.FhirSequenceCodes.R5:
                <fhir.candle.Components.FhirStoreTileR5
                    StoreName="@StoreManager.First().Key" 
                    Store="@StoreManager.First().Value"
                    RiName="@ServerConfig.ReferenceImplementation"
                    RiPages="@StoreManager.AdditionalPagesByTenant[StoreManager.First().Key]"
                    AdditionalContent="@_contentR5"
                    />
                break;
        }
    }
        else
    {
        <FluentLabel Typo="Typography.H6">FHIR Endpoints</FluentLabel>

        <FluentTabs Orientation="Orientation.Horizontal">
            @foreach (KeyValuePair<string, IFhirStore> kvp in @StoreManager.OrderBy(kvp => kvp.Key))
            {
                <FluentTab Label="@kvp.Key" Id="@kvp.Key">
                    <FluentCard>
                        @switch (kvp.Value.Config.FhirVersion)
                        {
                            case FhirReleases.FhirSequenceCodes.R4:
                                <fhir.candle.Components.FhirStoreTileR4 
                                    StoreName="@kvp.Key" 
                                    Store="@kvp.Value"
                                    RiName="@ServerConfig.ReferenceImplementation"
                                    RiPages="@StoreManager.AdditionalPagesByTenant[kvp.Key]"
                                    AdditionalContent="@_contentR4"
                                    />
                                break;

                            case FhirReleases.FhirSequenceCodes.R4B:
                                <fhir.candle.Components.FhirStoreTileR4B
                                    StoreName="@kvp.Key" 
                                    Store="@kvp.Value"
                                    RiName="@ServerConfig.ReferenceImplementation"
                                    RiPages="@StoreManager.AdditionalPagesByTenant[kvp.Key]"
                                    AdditionalContent="@_contentR4B"
                                    />
                                break;

                            case FhirReleases.FhirSequenceCodes.R5:
                                <fhir.candle.Components.FhirStoreTileR5
                                    StoreName="@kvp.Key" 
                                    Store="@kvp.Value"
                                    RiName="@ServerConfig.ReferenceImplementation"
                                    RiPages="@StoreManager.AdditionalPagesByTenant[kvp.Key]"
                                    AdditionalContent="@_contentR5"
                                    />
                                break;
                        }

                        @if (kvp.Value.Config.SmartRequired)
                        {
                            <FluentLabel Typo="Typography.Body">
                                SMART authorization has been set to <code>required</code> for this FHIR endpoint:
                            </FluentLabel>
                            <ul>
                                <li>
                                    The SMART well-known configuration is available at: 
                                    <code class="copy-click">@kvp.Value.Config.BaseUrl/.well-known/smart-configuration</code>.
                                </li>
                                <li>
                                    The metadata endpoint (<code>@kvp.Value.Config.BaseUrl/metadata</code>) is openly accessible.
                                </li>
                                <li>
                                    All other FHIR API calls require an access token with appropriate scopes.
                                </li>

                                <li>
                                    For testing convenience, there are headers and query parameters that can be used to 'streamline' login and authorization.
                                    <ul>
                                        <li>
                                            Query Parameter <code>candle_auth_bypass</code> or Header <code>candle-auth-bypass</code>, can have values:
                                            <code>administrator</code>, <code>patient</code>, or <code>practitioner</code>.  Using this value will 'fast-forward'
                                            through the SMART authorization process and return an access token with the appropriate scopes and launch parameters,
                                            as specified by the following options.
                                        </li>
                                        <li>
                                            Query Parameter <code>candle_patient</code> or Header <code>candle-patient</code> is used to set the <code>launch/patient</code>.
                                            Values MUST be formatted as <code>Patient/[id]</code> and MUST exist on the system.
                                        </li>
                                        <li>
                                            Query Parameter <code>candle_practitioner</code> or Header <code>candle-practitioner</code> is used to set the <code>launch/practitioner</code>.
                                            Values MUST be formatted as <code>Practitioner/[id]</code> and MUST exist on the system.
                                        </li>
                                    </ul>
                                </li>

                                <li>
                                    For testing convenience, there is an immutable access grant for the <code>administrator</code> user.
                                    <ul>
                                        <li>
                                            The <code>code</code> is <code class="copy-click">00000000-0000-0000-0000-000000000000</code>.
                                        </li>
                                        <li>
                                            The <code>access_token</code> is 
                                            <code class="copy-click">00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000</code>.
                                        </li>
                                        <li>
                                            The <code>refresh_token</code> is 
                                            <code class="copy-click">00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000</code>.
                                        </li>
                                        <li>
                                            All requests using this <code>access_token</code> are considered authorized
                                            (e.g., <code>Authorization: Bearer 00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000</code>).
                                        </li>
                                    </ul>
                                </li>
                            </ul>
                        }

                        @if (kvp.Value.Config.SmartAllowed)
                        {
                            <FluentLabel Typo="Typography.Body">
                                SMART authorization has been set to <code>optional</code> for this FHIR endpoint:
                            </FluentLabel>
                            <ul>
                                <li>
                                    The SMART well-known configuration is available at:
                                    <code class="copy-click">@kvp.Value.Config.BaseUrl/.well-known/smart-configuration</code>.
                                </li>
                                <li>
                                    The metadata endpoint (<code>@kvp.Value.Config.BaseUrl/metadata</code>) is openly accessible.
                                </li>
                                <li>
                                    For all other calls, if an authorization header is provided, it will be validated.  If
                                    no authorization header is provided, the call will be allowed.
                                </li>
                                <li>
                                    For testing convenience, there is an immutable access grant for the <code>administrator</code> user.
                                    <ul>
                                        <li>
                                            The <code>code</code> is <code class="copy-click">00000000-0000-0000-0000-000000000000</code>.
                                        </li>
                                        <li>
                                            The <code>access_token</code> is 
                                            <code class="copy-click">00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000</code>.
                                        </li>
                                        <li>
                                            The <code>refresh_token</code> is 
                                            <code class="copy-click">00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000</code>.
                                        </li>
                                        <li>
                                            All requests using this <code>access_token</code> are considered authorized
                                            (e.g., <code class="copy-click">Authorization: Bearer 00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000</code>).
                                        </li>
                                    </ul>
                                </li>
                            </ul>
                        }
                    </FluentCard>
                </FluentTab>
            }
        </FluentTabs>
    }

    <FluentDataGrid GenerateHeader="GenerateHeaderOption.None" GridTemplateColumns="1fr 1fr" TGridItem="string" role="grid" ShowHover="true">
        <FluentDataGridRow RowType="DataGridRowType.Header">
            <FluentDataGridCell GridColumn=1 CellType="DataGridCellType.ColumnHeader">Description</FluentDataGridCell>
            <FluentDataGridCell GridColumn=2 CellType="DataGridCellType.ColumnHeader">Link</FluentDataGridCell>
        </FluentDataGridRow>

        <FluentDataGridRow>
            <FluentDataGridCell GridColumn=1>GitHub Repository for this software</FluentDataGridCell>
            <FluentDataGridCell GridColumn=2>
                <FluentAnchor Appearance="Appearance.Hypertext" Href="https://github.com/FHIR/fhir-candle" Target="_blank">github.com</FluentAnchor>
            </FluentDataGridCell>
        </FluentDataGridRow>

        <FluentDataGridRow>
            <FluentDataGridCell GridColumn=1>FHIR R5 Subscriptions Framework</FluentDataGridCell>
            <FluentDataGridCell GridColumn=2>
                <FluentAnchor Appearance="Appearance.Hypertext" Href="https://hl7.org/fhir/R5/subscriptions.html" Target="_blank">hl7.org</FluentAnchor>
            </FluentDataGridCell>
        </FluentDataGridRow>

        <FluentDataGridRow>
            <FluentDataGridCell GridColumn=1>FHIR R4/R4B Subscriptions Backport IG</FluentDataGridCell>
            <FluentDataGridCell GridColumn=2>
                <FluentAnchor Appearance="Appearance.Hypertext" Href="https://www.hl7.org/fhir/uv/subscriptions-backport/index.htm" Target="_blank">hl7.org</FluentAnchor>
            </FluentDataGridCell>
        </FluentDataGridRow>

        <FluentDataGridRow>
            <FluentDataGridCell GridColumn=1>FHIR R4 Specification</FluentDataGridCell>
            <FluentDataGridCell GridColumn=2>
                <FluentAnchor Appearance="Appearance.Hypertext" Href="https://www.hl7.org/fhir/R4/" Target="_blank">hl7.org</FluentAnchor>
            </FluentDataGridCell>
        </FluentDataGridRow>

        <FluentDataGridRow>
            <FluentDataGridCell GridColumn=1>FHIR R4B Specification</FluentDataGridCell>
            <FluentDataGridCell GridColumn=2>
                <FluentAnchor Appearance="Appearance.Hypertext" Href="https://www.hl7.org/fhir/R4B/" Target="_blank">hl7.org</FluentAnchor>
            </FluentDataGridCell>
        </FluentDataGridRow>

    </FluentDataGrid>

</FluentStack>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    private Type? _contentR4 = null;
    private Type? _contentR4B = null;
    private Type? _contentR5 = null;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavTracker?.NotifyNav([]);

        Utils.GetAdditionalIndexContent(ServerConfig.ReferenceImplementation ?? string.Empty, out _contentR4, out _contentR4B, out _contentR5);
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
    }

}
