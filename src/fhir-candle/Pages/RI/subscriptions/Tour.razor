@using Microsoft.FluentUI.AspNetCore.Components;

@page "/subscriptions/tour"

@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager
@inject ISmartAuthManager AuthManager
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject IMessageService MessageService

@implements IDisposable
@implements IPackagePage

<PageTitle>Subscriptions Tour</PageTitle>

<FluentWizard StepperPosition="@StepperPosition.Left"
                DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)"
                Border="WizardBorder.Outside"
                StepTitleHiddenWhen="@GridItemHidden.XsAndDown"
                style="height: 100%"
                OnFinish="@(() => CleanUp())">
    <Steps>
        <FluentWizardStep Label="Intro" OnChange="@OnStepChange">
            This page contains a tour of topic-based subscriptions in FHIR @_store.Config.FhirVersion.
        </FluentWizardStep>

        <FluentWizardStep Label="Choose Topic" Summary="Select a subscription topic" OnChange="@OnStepChange">
            <ChildContent>
                @switch (_store.Config.FhirVersion)
                {
                    case FhirReleases.FhirSequenceCodes.R4:
                        <FhirCandle.Ui.R4.Subscriptions.TourStep01
                            Store="@_store"
                            StoreName="@StoreName"
                            />
                        break;

                    case FhirReleases.FhirSequenceCodes.R4B:
                        <FhirCandle.Ui.R4B.Subscriptions.TourStep01
                            Store="@_store"
                            StoreName="@StoreName"
                            />
                        break;

                    case FhirReleases.FhirSequenceCodes.R5:
                        <FhirCandle.Ui.R5.Subscriptions.TourStep01
                            Store="@_store"
                            StoreName="@StoreName"
                            />
                        break;
                }
            </ChildContent>
        </FluentWizardStep>

        <FluentWizardStep Label="Configure Subscription" Summary="Set details for the subscription" OnChange="@OnStepChange">
            <ChildContent>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentLabel Typo="Typography.Body">
                        In this step, we are configuration the subscription options.
                    </FluentLabel>

                    <FluentLabel Typo="Typography.H6">
                        The following options are fixed for this walkthrough and are displayed only for reference:
                    </FluentLabel>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8" class="indented">
                        <FluentSelect Label="Channel Type" @bind-Value="subscription.ChannelCode" TOption="string" >
                            <FluentOption Disabled="true" Value="@("email")">Email</FluentOption>
                            <FluentOption Disabled="true" Value="@("message")">FHIR Message</FluentOption>
                            <FluentOption Value="@("rest-hook")">REST Hook (http/s POST)</FluentOption>
                            <FluentOption Disabled="true" Value="@("websocket")">Websocket</FluentOption>
                            <FluentOption Disabled="true" Value="@("zulip")">Zulip</FluentOption>
                        </FluentSelect>

                        <FluentTextField Value="subscription.Endpoint" Label="Endpoint" ReadOnly="true"/>
                        <FluentNumberField @bind-Value="subscription.HeartbeatSeconds" Label="Heartbeat frequency (seconds)" ReadOnly="true"/>
                        <FluentTextField @bind-Value="Expiration" Label="End (expiration)" ReadOnly="true"/>
                    </FluentStack>

                    <br/>

                    <FluentLabel Typo="Typography.H6">
                        The following options are configurable in this walkthrough:
                    </FluentLabel>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8" class="indented">
                        <FluentLabel Typo="Typography.Body">
                            MIME Type to use for notifications:
                        </FluentLabel>

                        <FluentSelect Label="Content Type" @bind-Value="subscription.ContentType" TOption="string">
                            <FluentOption Value="@("application/fhir+json")">FHIR JSON</FluentOption>
                            <FluentOption Value="@("application/fhir+xml")">FHIR XML</FluentOption>
                        </FluentSelect>

                        <FluentLabel Typo="Typography.Body">
                            Amount of data to include in notifications:
                        </FluentLabel>

                        <FluentSelect Label="Content Level" @bind-Value="subscription.ContentLevel" TOption="string">
                            <FluentOption Value="@("empty")">Empty</FluentOption>
                            <FluentOption Value="@("id-only")">IDs Only</FluentOption>
                            <FluentOption Value="@("full-resource")">Full Resources</FluentOption>
                        </FluentSelect>
                    </FluentStack>

                </FluentStack>
            </ChildContent>
        </FluentWizardStep>

        <FluentWizardStep Label="Select Filters" Summary="Set criteria for triggering" OnChange="@OnStepChange">
            <ChildContent>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentLabel Typo="Typography.Body">
                        The final piece of configuration for a subscription are filter values.
                        In this tour, we will be using <code>Patient/example</code> as a 
                        patient filter for our topic.  Note that allowed filters are defined
                        by each topic.
                    </FluentLabel>
                    <FluentTextField Label="Subscription Filter" @bind-Value="@bindFilter" ReadOnly="true"/>
                </FluentStack>
            </ChildContent>
        </FluentWizardStep>

        <FluentWizardStep Label="Request Subscription" Summary="Create the resource on the server" OnChange="@OnStepChange">
            <ChildContent>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentLabel Typo="Typography.Body">
                        With our configuration complete, we are ready to create our
                        resource and request it on the server.
                    </FluentLabel>

                    <FluentButton Appearance="Appearance.Accent" OnClick="@(() => PostSubscription())">
                        POST Subscription
                    </FluentButton>


                    @if (!string.IsNullOrEmpty(subscriptionLocation))
                    {
                        <FluentLabel Typo="Typography.Body">
                            Now that our subscription is created, is can be viewed
                            <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/store/resource-viewer?store={StoreName}&type=Subscription&id={subscription.Id}")"
                                        >here</FluentAnchor>,
                            or requested (in FHIR) at
                            <code class="copy-click">@subscriptionLocation</code>.
                        </FluentLabel>
                    }
                </FluentStack>
            </ChildContent>
        </FluentWizardStep>

        <FluentWizardStep Label="Server Handshake" Summary="Server tests endpoint" OnChange="@OnStepChange">
            <ChildContent>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    @if (string.IsNullOrEmpty(handshakeBundleId))
                    {
                        <FluentLabel Typo="Typography.Body">Waiting for handshake.</FluentLabel>
                        <FluentProgress></FluentProgress>
                    }
                    else
                    {
                        <FluentLabel Typo="Typography.Body">
                            Handshake received! The notification bundle can be viewed
                            <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/store/resource-viewer?store={StoreName}&type=Bundle&id={handshakeBundleId}")"
                                        >here</FluentAnchor>,
                            or requested (in FHIR) at
                            <code class="copy-click">@($"{_store.Config.BaseUrl}/Bundle/{handshakeBundleId}")</code>.
                        </FluentLabel>
                    }
                </FluentStack>
            </ChildContent>
        </FluentWizardStep>

        <FluentWizardStep Label="Trigger Notification" OnChange="@OnStepChange">
            <ChildContent>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentLabel Typo="Typography.Body">
                        The topic we are using is set to trigger when an <code>Encounter</code> is set to the
                        status of <code>@encounterStatus</code>.  This can be true either when the encounter
                        resource is created, or it could be updated from another state.
                    </FluentLabel>

                    <FluentLabel Typo="Typography.Body">
                        Since we specified the filter that encounters need to have a <code>patient</code>
                        that matches <code>Patient/example</code>, we need to also set the <code>subject</code>
                        reference to that patient.
                    </FluentLabel>

                    <FluentLabel Typo="Typography.Body">
                        For simplicity during this walkthrough, we will create an encounter with all the 
                        values needed to trigger a notification.
                    </FluentLabel>

                    <FluentButton Appearance="Appearance.Accent" OnClick="@(() => PostEncounter())">
                        POST Encounter
                    </FluentButton>

                    @if (postedEncounters.Any() &&
                        (postedEncounters.Last() is string encounterId) &&
                        (!string.IsNullOrEmpty(encounterId)))
                    {
                        <FluentLabel Typo="Typography.Body">
                            Encounter posted! The resource can be viewed
                            <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/store/resource-viewer?store={StoreName}&type=Encounter&id={encounterId}")"
                                        >here</FluentAnchor>,
                            or requested (in FHIR) at
                            <code class="copy-click">@_store.Config.BaseUrl/Encounter/@encounterId</code>.
                        </FluentLabel>
                    }
                </FluentStack>
            </ChildContent>
        </FluentWizardStep>

        <FluentWizardStep Label="Review Notifications" OnChange="@OnStepChange">
            <ChildContent>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    @if (!postedEncounters.Any())
                    {
                        <FluentLabel Typo="Typography.Body">Waiting for notifications...</FluentLabel>
                        <FluentProgress></FluentProgress>
                    }
                    else
                    {
                        <FluentLabel Typo="Typography.Body">
                            This subscription has triggered @postedEncounters.Count notifications.
                        </FluentLabel>

                        <FluentLabel Typo="Typography.Body">
                            Details about sent notifications for this subscription can be found
                            <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/subscriptions/notification-local-viewer?store={StoreName}&id={subscription.Id}")"
                                        >here</FluentAnchor>.
                        </FluentLabel>

                        <FluentLabel Typo="Typography.Body">
                            Details about received notifications for this subscription can be found
                            <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/subscriptions/notification-received-viewer?store={StoreName}&ref={subscriptionLocation}")"
                                        >here</FluentAnchor>.
                        </FluentLabel>
                    }
                </FluentStack>
            </ChildContent>
        </FluentWizardStep>

        <FluentWizardStep Label="Clean Up" OnChange="@OnStepChange">
            <ChildContent>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentLabel Typo="Typography.Body">
                        That completes this tour.  If you have any questions, comments, or suggestions
                        for this software, please let us know.  A link to the GitHub repository for this
                        project can be found on the top right corner of the screen.
                    </FluentLabel>

                    <FluentLabel Typo="Typography.Body">
                        Please click the button below to remove the resources created during this session.
                        Thank you!
                    </FluentLabel>

                    <FluentButton Appearance="Appearance.Accent" OnClick="@(() => CleanUp())">
                        Done!
                    </FluentButton>
                </FluentStack>
            </ChildContent>
        </FluentWizardStep>

    </Steps>
</FluentWizard>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    private NavPageInfoRec[] _navPages => new NavPageInfoRec[]
    {
        new() { Display = StoreName, Link = "/store?store=" + StoreName },
        new() { Display = PageName, Link = RoutePath + "store=" + StoreName },
    };

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    /// <summary>The store.</summary>
    private IFhirStore _store = null!;

    private Timer _recheckTimer = null!;

    /// <summary>Gets or sets the on step.</summary>
    private int onStep { get; set; } = 1;

    /// <summary>The subscription location.</summary>
    private string subscriptionLocation = string.Empty;

    /// <summary>Identifier for the handshake bundle.</summary>
    private string handshakeBundleId = string.Empty;

    /// <summary>Gets the expiration.</summary>
    private string Expiration
    {
        get => DateTime.Now.ToString("O") + " (in 10 minutes)";
        set { }
    }

    /// <summary>The subscription.</summary>
    ParsedSubscription subscription = new()
    {
        Id = Guid.NewGuid().ToString(),
        TopicUrl = "http://example.org/FHIR/SubscriptionTopic/encounter-complete",
        CurrentStatus = "requested",
        Reason = "Test subscription for walkthrough",
        ChannelCode = "rest-hook",
        ChannelSystem = "http://terminology.hl7.org/CodeSystem/subscription-channel-type",
        Endpoint = string.Empty,
        HeartbeatSeconds = 120,
        ExpirationTicks = DateTime.Now.AddMinutes(10).Ticks,
        ContentType = "application/fhir+json",
        ContentLevel = "id-only",
        Filters = new()
        {
            { "Encounter", 
                [
                    new ParsedSubscription.SubscriptionFilter(
                        "Encounter", 
                        "patient", 
                        string.Empty, 
                        string.Empty, 
                        "Patient/example")
                ]
            },
        }
    };

    /// <summary>The encounter status.</summary>
    private string encounterStatus = "completed";

    /// <summary>True to posting resource.</summary>
    private bool postingResource = false;

    /// <summary>The posted encounters.</summary>
    List<string> postedEncounters = new();

    /// <summary>Gets the content for package.</summary>
    public static string ContentFor => "subscriptions";

    /// <summary>Gets the name of the page.</summary>
    public static string PageName => "Subscriptions RI Tour";

    /// <summary>Gets the description.</summary>
    public static string Description => "This page contains a tour of topic-based subscriptions.";

    /// <summary>Gets the full pathname of the route file.</summary>
    public static string RoutePath => "/subscriptions/tour";

    private string bindFilter = "Patient/example";

    void OnStepChange(FluentWizardStepChangeEventArgs e)
    {
        MoveToStep(e.TargetIndex);
    }

    /// <summary>Move to step.</summary>
    /// <param name="toStep">to step.</param>
    private void MoveToStep(int toStep)
    {
        onStep = toStep;

        if (toStep < 9)
        {
            _ = JS.InvokeVoidAsync("scrollElementIntoView", "element-step-" + toStep);
        }

        InvokeAsync(StateHasChanged);
    }

    /// <summary>Posts the subscription.</summary>
    private void PostSubscription()
    {
        if ((postingResource) || (!string.IsNullOrEmpty(subscriptionLocation)))
        {
            return;
        }

        postingResource = true;

        if (!_store.TryGetSubscription(subscription, out object? s))
        {
            _ = MessageService.ShowMessageBarAsync(
                "Failed to build subscription object.", 
                MessageIntent.Error, 
                "MESSAGES_TOP");
            postingResource = false;
            return;
        }

        FhirRequestContext ctx = new(_store, "POST", "Subscription", s);

        if (!_store.InstanceCreate(ctx, out FhirResponseContext response))
        {
            _ = MessageService.ShowMessageBarAsync(
                "Failed to create Subscription!\n" + response.SerializedOutcome, 
                MessageIntent.Error, 
                "MESSAGES_TOP");
            postingResource = false;
            return;
        }

        postingResource = false;
        subscriptionLocation = response.Location;
        MoveToStep(5);
    }

    /// <summary>Posts the encounter.</summary>
    private void PostEncounter()
    {
        if (postingResource)
        {
            return;
        }

        postingResource = true;

        FhirRequestContext ctx = new(_store, "POST", "Encounter")
        {
            SourceContent = getJsonEncounter(),
            SourceFormat = "application/fhir+json",
        };

        if (!_store.InstanceCreate(ctx, out FhirResponseContext response))
        {
            _ = MessageService.ShowMessageBarAsync(
                "Failed to create Encounter!\n" + response.SerializedOutcome, 
                MessageIntent.Error, 
                "MESSAGES_TOP");
            postingResource = false;
            return;
        }

        postingResource = false;
        postedEncounters.Add(response.Id);
        MoveToStep(7);
        return;

        string getJsonEncounter() => _store.Config.FhirVersion switch
        {
            FhirReleases.FhirSequenceCodes.R4 => FhirCandle.Ui.R4.Subscriptions.TourUtils.EncounterJson,
            FhirReleases.FhirSequenceCodes.R4B => FhirCandle.Ui.R4B.Subscriptions.TourUtils.EncounterJson,
            FhirReleases.FhirSequenceCodes.R5 => FhirCandle.Ui.R5.Subscriptions.TourUtils.EncounterJson,
            _ => string.Empty,
        };
    }

    /// <summary>Clean up.</summary>
    private void CleanUp()
    {
        if (!string.IsNullOrEmpty(subscriptionLocation))
        {
            _ = _store.InstanceDelete(new FhirRequestContext(_store, "DELETE", subscriptionLocation), out _);
            subscriptionLocation = string.Empty;
        }

        if (!string.IsNullOrEmpty(handshakeBundleId))
        {
            _ = _store.InstanceDelete(new FhirRequestContext(_store, "DELETE", "Bundle/" + handshakeBundleId), out _);
            handshakeBundleId = string.Empty;
        }

        foreach (string encId in postedEncounters)
        {
            _ = _store.InstanceDelete(new FhirRequestContext(_store, "DELETE", "Encounter/" + encId), out _);
        }

        postedEncounters.Clear();

        MoveToStep(1);
    }

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if ((!string.IsNullOrEmpty(StoreName)) &&
            (StoreManager.TryGetValue(StoreName, out _store!)))
        {
            _store.OnInstanceCreated += Store_OnChanged;
            _store.OnSubscriptionSendEvent += Store_OnSubscriptionSendEvent;
            _store.OnSubscriptionsChanged += Store_OnSubscriptionsChanged;

            subscription.Endpoint = _store.Config.BaseUrl + "/$subscription-hook";

            encounterStatus = _store.Config.FhirVersion >= FhirReleases.FhirSequenceCodes.R5
                ? "completed"
                : "finished";
        }

        // notify of store root in case user clicked here directly
        NavTracker?.NotifyNav(_navPages);
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/subscriptions/tour", StringComparison.Ordinal))
        {
            if (_store != null)
            {
                _store.OnInstanceCreated -= Store_OnChanged;
                _store.OnSubscriptionSendEvent -= Store_OnSubscriptionSendEvent;
                _store.OnSubscriptionsChanged -= Store_OnSubscriptionsChanged;
            }

            if ((!string.IsNullOrEmpty(StoreName)) &&
                (StoreManager.TryGetValue(StoreName, out _store!)))
            {
                _store.OnInstanceCreated += Store_OnChanged;
                _store.OnSubscriptionSendEvent += Store_OnSubscriptionSendEvent;
                _store.OnSubscriptionsChanged += Store_OnSubscriptionsChanged;

                subscription.Endpoint = _store.Config.BaseUrl + "/$subscription-hook";
            }

            // notify of store root in case user clicked here directly
            NavTracker?.NotifyNav(_navPages);
        }
    }

    /// <summary>Event handler. Called by Store when a subscription changes.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Subscription event information.</param>
    private void Store_OnSubscriptionsChanged(object? sender, SubscriptionChangedEventArgs e)
    {
        if (e.ChangedSubscription?.Id.Equals(subscription.Id, StringComparison.Ordinal) ?? false)
        {
            if (string.IsNullOrEmpty(subscriptionLocation))
            {
                _recheckTimer = new Timer(
                    RecheckSubscriptionChanged,
                    e,
                    TimeSpan.Zero,
                    TimeSpan.FromSeconds(1));

                return;
            }

            if (e.ChangedSubscription.CurrentStatus == "active")
            {
                if (_store.ReceivedNotifications.TryGetValue(subscriptionLocation, out List<ParsedSubscriptionStatus>? notifications))
                {
                    ParsedSubscriptionStatus? handshake = notifications.Where(n => n.NotificationType == ParsedSubscription.NotificationTypeCodes.Handshake)?.First() ?? null;

                    if (handshake != null)
                    {
                        handshakeBundleId = handshake.BundleId;
                    }
                }

                MoveToStep(6);
            }

            return;
        }

        if ((!string.IsNullOrEmpty(e.RemovedSubscriptionId)) &&
            (e.RemovedSubscriptionId.Equals(subscription.Id, StringComparison.Ordinal)))
        {
            MoveToStep(10);
        }
    }

    private void RecheckSubscriptionChanged(object? state)
    {
        if (string.IsNullOrEmpty(subscriptionLocation))
        {
            return;
        }

        _recheckTimer?.Change(Timeout.Infinite, 0);
        _recheckTimer?.Dispose();

        Store_OnSubscriptionsChanged(this, (SubscriptionChangedEventArgs)state!);
    }

    /// <summary>Event handler. Called by Store for on subscription events.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Subscription event information.</param>
    private void Store_OnSubscriptionSendEvent(object? sender, SubscriptionSendEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void Store_OnChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        _recheckTimer?.Change(Timeout.Infinite, 0);
        _recheckTimer?.Dispose();

        if (_store != null)
        {
            _store.OnInstanceCreated -= Store_OnChanged;
            _store.OnSubscriptionSendEvent -= Store_OnSubscriptionSendEvent;
            _store.OnSubscriptionsChanged -= Store_OnSubscriptionsChanged;
        }
    }
}
