@page "/davinci-pas/walkthrough"

@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager
@inject IJSRuntime JS

@implements IDisposable
@implements IPackagePage

<PageTitle>CDex Tasks</PageTitle>

<MudPaper Class="pa-4 ma-2" Square="true">
    <MudText Typo="Typo.h6">PAS using CDex Tasks</MudText>
    <MudText Typo="Typo.body1">
        This page provides a walkthrough of DaVinci Prior Authorization Support (PAS), in FHIR R4.
        The CI build of the IG can be found on
        <MudLink Href="https://build.fhir.org/ig/HL7/davinci-pas/"
                 Underline="Underline.Always">build.fhir.org</MudLink>,
        and the most recent published version can be found on
        <MudLink Href="http://hl7.org/fhir/us/davinci-pas/"
                 Underline="Underline.Always">hl7.org</MudLink>.
        <br />
        Note that this walkthrough uses two internal FHIR endpoints, one for a Provider and one for a Payer or Intermediary.
    </MudText>
    <br />

    <FhirCandle.Ui.R4.davinci_pas.PasWalkthroughR4
        ProviderStore="@_provider"
        PayerStore="@_payer"
        />
</MudPaper>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    private IFhirStore _provider = null!;
    private IFhirStore _payer = null!;

    /// <summary>Gets the content for package.</summary>
    public static string ContentFor { get => "hl7.fhir.us.davinci-pas"; }

    /// <summary>Gets the name of the page.</summary>
    public static string PageName { get => "PAS Walkthrough (incomplete!)"; }

    /// <summary>Gets the description.</summary>
    public static string Description { get => "A walkthrough of a FHIR-based PAS workflow (work in progress)."; }

    /// <summary>Gets the full pathname of the route file.</summary>
    public static string RoutePath { get => "/davinci-pas/walkthrough"; }

    /// <summary>Gets the FHIR version literal.</summary>
    public static string FhirVersionLiteral { get => "R4"; }

    /// <summary>Gets the FHIR version numeric.</summary>
    public static string FhirVersionNumeric { get => "4.0"; }

    /// <summary>Gets the only show on endpoint.</summary>
    public static string OnlyShowOnEndpoint { get => "provider"; }

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        foreach ((string name, IFhirStore store) in StoreManager)
        {
            if (name.Contains("provider", StringComparison.OrdinalIgnoreCase))
            {
                _provider = store;
                _provider.OnChanged += Store_OnChanged;
            }
            else if (name.Contains("payer", StringComparison.OrdinalIgnoreCase))
            {
                _payer = store;
                _payer.OnChanged += Store_OnChanged;
            }
            else if (name.Contains("intermediary", StringComparison.OrdinalIgnoreCase))
            {
                _payer = store;
                _payer.OnChanged += Store_OnChanged;
            }
        }

        // notify of store root in case user clicked here directly
        NavTracker?.NotifyNav($"PAS Walkthrough", "/davinci-pas/walkthrough", 1);
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/davinci-pas/walkthrough", StringComparison.Ordinal))
        {
            if (_provider != null)
            {
                _provider.OnChanged -= Store_OnChanged;
            }

            if (_payer != null)
            {
                _payer.OnChanged -= Store_OnChanged;
            }

            foreach ((string name, IFhirStore store) in StoreManager)
            {
                if (name.Contains("provider", StringComparison.OrdinalIgnoreCase))
                {
                    _provider = store;
                    _provider.OnChanged += Store_OnChanged;
                }
                else if (name.Contains("payer", StringComparison.OrdinalIgnoreCase))
                {
                    _payer = store;
                    _payer.OnChanged += Store_OnChanged;
                }
                else if (name.Contains("intermediary", StringComparison.OrdinalIgnoreCase))
                {
                    _payer = store;
                    _payer.OnChanged += Store_OnChanged;
                }
            }

            // notify of store root in case user clicked here directly
            NavTracker?.NotifyNav($"PAS Walkthrough", "/davinci-pas/walkthrough", 1);
        }
    }

    /// <summary>FHIR store on changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information.</param>
    private void Store_OnChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        if (_provider != null)
        {
            _provider.OnChanged -= Store_OnChanged;
        }

        if (_payer != null)
        {
            _payer.OnChanged -= Store_OnChanged;
        }
    }
}