@using Microsoft.FluentUI.AspNetCore.Components;

@page "/smart/login"
@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager
@inject ISmartAuthManager AuthManager

@implements IDisposable

<PageTitle>SMART Login</PageTitle>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
    <FluentLabel Typo="Typography.H4">SMART Login</FluentLabel>
    <FluentLabel Typo="Typography.Body">Please login to the FHIR store: @StoreName.</FluentLabel>

    <FluentTabs Orientation="Orientation.Horizontal">
        <FluentTab Label="Patient Login">
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                @switch (_store.Config.FhirVersion)
                {
                    case TenantConfiguration.SupportedFhirVersions.R4:
                        <FhirCandle.Ui.R4.Components.Pickers.PickerPatient
                            Store="@_store"
                            ResourceStore="@_store["Patient"]"
                            @bind-SelectedId="SelectedPatientId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;

                    case TenantConfiguration.SupportedFhirVersions.R4B:
                        <FhirCandle.Ui.R4B.Components.Pickers.PickerPatient
                            Store="@_store"
                            ResourceStore="@_store["Patient"]"
                            @bind-SelectedId="SelectedPatientId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;

                    case TenantConfiguration.SupportedFhirVersions.R5:
                        <FhirCandle.Ui.R5.Components.Pickers.PickerPatient
                            Store="@_store"
                            ResourceStore="@_store["Patient"]"
                            @bind-SelectedId="SelectedPatientId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;
                }

                <FluentTextField Label="User (Patient)" @bind-Value="SelectedPatientId" ReadOnly="true" />
                <FluentTextField Label="Patient" @bind-Value="SelectedPatientId" ReadOnly="true" />

                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">
                    <FluentButton Appearance="Appearance.Accent" Disabled="@(string.IsNullOrEmpty(SelectedPatientId))" OnClick="@(() => ProcessLoginPatient())">Login</FluentButton>
                    <FluentButton Appearance="Appearance.Accent" OnClick="@(() => CancelLogin())">Cancel</FluentButton>
                </FluentStack>
            </FluentStack>
        </FluentTab>

        <FluentTab Label="Practitioner Login">
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                @switch (_store.Config.FhirVersion)
                {
                    case TenantConfiguration.SupportedFhirVersions.R4:
                        <FhirCandle.Ui.R4.Components.Pickers.PickerPractitioner
                            Store="@_store"
                            ResourceStore="@_store["Practitioner"]"
                            @bind-SelectedId="SelectedPractitionerId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;

                    case TenantConfiguration.SupportedFhirVersions.R4B:
                        <FhirCandle.Ui.R4B.Components.Pickers.PickerPractitioner
                            Store="@_store"
                            ResourceStore="@_store["Practitioner"]"
                            @bind-SelectedId="SelectedPractitionerId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;

                    case TenantConfiguration.SupportedFhirVersions.R5:
                        <FhirCandle.Ui.R5.Components.Pickers.PickerPractitioner
                            Store="@_store"
                            ResourceStore="@_store["Practitioner"]"
                            @bind-SelectedId="SelectedPractitionerId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;
                }

                <FluentLabel Typo="Typography.Body">If you want a patient context, please select a patient below:</FluentLabel>

                @switch (_store.Config.FhirVersion)
                {
                    case TenantConfiguration.SupportedFhirVersions.R4:
                        <FhirCandle.Ui.R4.Components.Pickers.PickerPatient
                            Store="@_store"
                            ResourceStore="@_store["Patient"]"
                            @bind-SelectedId="SelectedPatientId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;

                    case TenantConfiguration.SupportedFhirVersions.R4B:
                        <FhirCandle.Ui.R4B.Components.Pickers.PickerPatient
                            Store="@_store"
                            ResourceStore="@_store["Patient"]"
                            @bind-SelectedId="SelectedPatientId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;

                    case TenantConfiguration.SupportedFhirVersions.R5:
                        <FhirCandle.Ui.R5.Components.Pickers.PickerPatient
                            Store="@_store"
                            ResourceStore="@_store["Patient"]"
                            @bind-SelectedId="SelectedPatientId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;
                    }

                <FluentTextField Label="User (Practitioner)" @bind-Value="SelectedPractitionerId" ReadOnly="true" />
                <FluentTextField Label="Patient" @bind-Value="SelectedPatientId" ReadOnly="true" />
                <FluentTextField Label="Practitioner" @bind-Value="SelectedPractitionerId" ReadOnly="true" />

                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">
                    <FluentButton Appearance="Appearance.Accent" Disabled="@(string.IsNullOrEmpty(SelectedPractitionerId))" OnClick="@(() => ProcessLoginPractitioner())">Login</FluentButton>
                    <FluentButton Appearance="Appearance.Accent" OnClick="@(() => CancelLogin())">Cancel</FluentButton>
                </FluentStack>
            </FluentStack>
        </FluentTab>

        <FluentTab Label="Administrator Login">
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                <FluentLabel Typo="Typography.Body">If you want a patient context, please select a patient below:</FluentLabel>

                @switch (_store.Config.FhirVersion)
                {
                    case TenantConfiguration.SupportedFhirVersions.R4:
                        <FhirCandle.Ui.R4.Components.Pickers.PickerPatient
                            Store="@_store"
                            ResourceStore="@_store["Patient"]"
                            @bind-SelectedId="SelectedPatientId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;

                    case TenantConfiguration.SupportedFhirVersions.R4B:
                        <FhirCandle.Ui.R4B.Components.Pickers.PickerPatient
                            Store="@_store"
                            ResourceStore="@_store["Patient"]"
                            @bind-SelectedId="SelectedPatientId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;

                    case TenantConfiguration.SupportedFhirVersions.R5:
                        <FhirCandle.Ui.R5.Components.Pickers.PickerPatient
                            Store="@_store"
                            ResourceStore="@_store["Patient"]"
                            @bind-SelectedId="SelectedPatientId"
                            @bind-SelectedId:event="SelectedIdChanged"
                            />
                        break;
                }

                <FluentTextField Label="User (Admin)" Value="@("administrator")" ReadOnly="true" />
                <FluentTextField Label="Patient" @bind-Value="SelectedPatientId" ReadOnly="true" />

                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">
                    <FluentButton Appearance="Appearance.Accent" OnClick="@(() => ProcessLoginAdministrator())">Login</FluentButton>
                    <FluentButton Appearance="Appearance.Accent" OnClick="@(() => CancelLogin())">Cancel</FluentButton>
                </FluentStack>
            </FluentStack>
        </FluentTab>
    </FluentTabs>
</FluentStack>


@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreName { get; set; } = "";

    private IFhirStore _store = null!;

    /// <summary>Gets or sets the authorization key.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "key")]
    public string Key { get; set; } = string.Empty;

    /// <summary>The authorization information.</summary>
    private AuthorizationInfo _auth = null!;

    /// <summary>Gets or sets the selected user.</summary>
    public string SelectedUser { get; set; } = string.Empty;

    /// <summary>Gets or sets the selected patient identifier.</summary>
    public string SelectedPatientId { get; set; } = string.Empty;

    /// <summary>Gets or sets the selected practitioner identifier.</summary>
    public string SelectedPractitionerId { get; set; } = string.Empty;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _ = StoreManager.TryGetValue(StoreName, out _store!);
        _ = AuthManager.TryGetAuthorization(StoreName, Key, out _auth);

        // if ((!string.IsNullOrEmpty(StoreName)) &&
        //     (AuthManager.HasTenant(StoreName)))
        // {
        //     //
        // }

        NavTracker?.NotifyNav(StoreName, $"/smart/login?store={StoreName}&key={Key}", 1);
    }

    /// <summary>Cancel login.</summary>
    private void CancelLogin()
    {
        if (AuthManager.TryGetClientRedirect(StoreName, Key, out string url, "canceled", "canceled by user request"))
        {
            NavigationManager.NavigateTo(url);
        }

        // TODO: show an error on the screen
    }

    private void ProcessLogin()
    {
        _auth.UserId = SelectedUser;
        _auth.LaunchPatient = SelectedPatientId;
        _auth.LaunchPractitioner = SelectedPractitionerId;

        _ = AuthManager.TryUpdateAuth(StoreName, Key, _auth);

        NavigationManager.NavigateTo($"/smart/auth?store={StoreName}&key={Key}");
    }

    private void ProcessLoginAdministrator()
    {
        _auth.UserId = "administrator";
        _auth.LaunchPatient = SelectedPatientId;

        _ = AuthManager.TryUpdateAuth(StoreName, Key, _auth);

        NavigationManager.NavigateTo($"/smart/auth?store={StoreName}&key={Key}");
    }

    private void ProcessLoginPatient()
    {
        _auth.UserId = "Patient/" + SelectedPatientId;
        _auth.LaunchPatient = SelectedPatientId;

        _ = AuthManager.TryUpdateAuth(StoreName, Key, _auth);

        NavigationManager.NavigateTo($"/smart/auth?store={StoreName}&key={Key}");
    }

    private void ProcessLoginPractitioner()
    {
        _auth.UserId = "Practitioner/" + SelectedPractitionerId;
        _auth.LaunchPatient = SelectedPatientId;
        _auth.LaunchPractitioner = SelectedPractitionerId;

        _ = AuthManager.TryUpdateAuth(StoreName, Key, _auth);

        NavigationManager.NavigateTo($"/smart/auth?store={StoreName}&key={Key}");
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/smart/login?", StringComparison.Ordinal))
        {
            // if (_store != null)
            // {
            //     _store.OnChanged -= Store_OnChanged;
            // }

            _ = StoreManager.TryGetValue(StoreName, out _store!);
            _ = AuthManager.TryGetAuthorization(StoreName, Key, out _auth);

            // if ((!string.IsNullOrEmpty(StoreName)) &&
            //     (StoreManager.TryGetValue(StoreName, out _store!)))
            // {
            // }

            NavTracker?.NotifyNav(StoreName, $"/smart/login?store={StoreName}&key={Key}", 1);
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        // if (_store != null)
        // {
        // }
    }
}
