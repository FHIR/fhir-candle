@using Microsoft.FluentUI.AspNetCore.Components;

@page "/smart/clients"
@using FhirCandle.Smart
@using Microsoft.IdentityModel.Tokens

@inject NavigationManager NavigationManager
@inject IFhirStoreManager StoreManager
@inject ISmartAuthManager AuthManager

@implements IDisposable

<PageTitle>SMART Clients</PageTitle>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
    <FluentAnchor Appearance="Appearance.Accent" Href="/smart/client_details">Register New Client</FluentAnchor>

    @if (!AuthManager.SmartClients.Any())
    {
        <FluentLabel>No SMART clients have been registered.</FluentLabel>
    }
    else
    {
        <FluentGrid Spacing="8" style="background-color: var(--neutral-layer-3)">
            @foreach (ClientInfo smartClient in AuthManager.SmartClients.Values.OrderBy(sc => sc.ClientName))
            {
                <FluentGridItem Style="min-width: var(--field-container-min-width);">
                    <FluentCard>
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                            <FluentTextField ReadOnly="true" Label="Client Name" Value="@smartClient.ClientName" />
                            <FluentTextField ReadOnly="true" Label="Client ID" Value="@smartClient.ClientId" />

                            @if (smartClient.Registration != null)
                            {
                                @if (!string.IsNullOrEmpty(smartClient.Registration.JwksUri))
                                {
                                    <FluentTextField Label="JWKS URI" ReadOnly="true" Value="@smartClient.Registration.JwksUri" />
                                }

                                @foreach (JsonWebKey key in (smartClient.Registration.KeySet.Keys ?? Enumerable.Empty<JsonWebKey>()))
                                {
                                    <FluentTextField Label="Key Info" ReadOnly="true" Value="@(key.Alg + ": " + key.KeyId)" />
                                }
                            }

                            @if (smartClient.Activity.Any())
                            {
                                @foreach (ClientInfo.ClientActivityRecord activity in smartClient.Activity.OrderByDescending(a => a.Timestamp).Take(3))
                                {
                                    <FluentTextField Label="Activity" ReadOnly="true" Value="@(activity.RequestType + " " + activity.Timestamp.ToString("o") + " " + (activity.Success ? "success" : "fail"))" />
                                    @if (!string.IsNullOrEmpty(activity.Message))
                                    {
                                        <FluentTextField Label="Message" ReadOnly="true" Value="@activity.Message" />
                                    }
                                }
                            }

                            <FluentAnchor Appearance="Appearance.Accent" Href="@($"/smart/client_details?smartClientId={smartClient.ClientId}")">Edit</FluentAnchor>
                        </FluentStack>
                    </FluentCard>
                </FluentGridItem>
            }
        </FluentGrid>
    }

</FluentStack>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    private NavPageInfoRec[] _navPages => new NavPageInfoRec[]
    {
        new() { Display = "SMART Clients", Link = "/smart/clients" },
    };

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavTracker?.NotifyNav(_navPages);
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/smart/clients", StringComparison.Ordinal))
        {
            NavTracker?.NotifyNav(_navPages);
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        // if (_store != null)
        // {
        // }
    }
}
