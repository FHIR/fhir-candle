@using Microsoft.FluentUI.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

@namespace fhir.candle.Layout

@inherits LayoutComponentBase

@inject ProtectedLocalStorage BrowserStore
@inject IFhirStoreManager StoreManager
@inject ISmartAuthManager AuthManager
@inject ServerConfiguration ServerConfig
@inject IJSRuntime JS
@inject IDialogService DialogService

@implements INavTracker

@* Note this is just the OfficeColor.Teams color, but getting the binding correct with external loading is touchy right now *@
<FluentDesignTheme @bind-Mode="@Mode" CustomColor="#6264a7" StorageName="theme" />
@* <FluentDesignTheme @bind-Mode="@Mode" @bind-OfficeColor="@OfficeColor" StorageName="theme" /> *@

<FluentToastProvider />
<FluentDialogProvider />
<FluentTooltipProvider />
<FluentMessageBarProvider />

@* Testing colors: 3299ff, 287acc, 028aff, 5e90e2, 095dac *@

<FluentLayout>
    <FluentDesignSystemProvider NeutralBaseColor="#287acc" BaseLayerLuminance="1" AccentBaseColor="#287acc" FillColor="#ffffff">
        <FluentHeader>
            <FluentButton Style="margin-right=5px;" Title="Navigation" IconEnd="@(new Icons.Regular.Size24.Navigation())" OnClick="@OpenNavPanel" Appearance="Appearance.Accent" />
            <FluentBreadcrumb>
                @foreach (NavBreadcrumb item in _crumbs)
                {
                    <FluentBreadcrumbItem Link="@item.Link">@item.Text</FluentBreadcrumbItem>
                }
            </FluentBreadcrumb>
            <FluentSpacer />
            <FluentAnchor Href="https://github.com/GinoCanessa/fhir-candle" Target="_blank" Appearance="Appearance.Accent">
                <img src="media/github-mark-white.svg" height="20" width="20" />
            </FluentAnchor>
            <FluentButton Title="Light/Dark Mode"
                Appearance="Appearance.Accent"
                IconEnd="@(new Icons.Regular.Size20.DarkTheme())" 
                OnClick="@ToggleMode" />
        </FluentHeader>
    </FluentDesignSystemProvider>

    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <FluentBodyContent Class="body-content">
            <div class="content">
                <CascadingValue Value="@this">
                    @Body
                </CascadingValue>
            </div>
        </FluentBodyContent>
    </FluentStack>
</FluentLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    private record struct NavBreadcrumb(string Text, string Link);

    /// <summary>Gets or sets the mode.</summary>
    public DesignThemeModes Mode { get; set; }

    /// <summary>Gets the is dark mode.</summary>
    public bool IsDarkMode => (Mode == DesignThemeModes.Dark);

    /// <summary>The navigation dialog.</summary>
    private IDialogReference? _navDialog;

    /// <summary>The crumbs.</summary>
    private List<NavBreadcrumb> _crumbs = new()
    {
        new NavBreadcrumb("FHIR Candle", "#"),
    };

    /// <summary>Links for store.</summary>
    /// <param name="storeName">Name of the store.</param>
    /// <returns>A string.</returns>
    private string LinkForStore(string storeName)
    {
        return $"/store?store={storeName}";
    }

    private async Task OpenNavPanel()
    {
        // create the dialog
        _navDialog = await DialogService.ShowPanelAsync<NavMenu>(string.Empty, new DialogParameters<string>()
        {
            Title = "FHIR Candle",
            Content = string.Empty,
            Alignment = HorizontalAlignment.Left,
            PrimaryActionEnabled = false,
            SecondaryActionEnabled = false,
            ShowDismiss = false,
        });

        // show the dialog, but we do not care about the result
        _ = await _navDialog.Result;
    }

    /// <summary>Logs an asynchronous.</summary>
    /// <param name="message">The message.</param>
    /// <returns>An asynchronous result.</returns>
    public async Task JsLogAsync(string message)
    {
        // note this has to be awaited or the call never happens
        await JS.InvokeVoidAsync("console.log", message);
    }

    /// <summary>Js clipboard copy.</summary>
    /// <param name="content">The content.</param>
    /// <returns>An asynchronous result.</returns>
    public async Task JsClipboardCopy(string content)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", content);
    }

    /// <summary>Toggle mode.</summary>
    private void ToggleMode()
    {
        if (Mode == DesignThemeModes.Dark)
        {
            Mode = DesignThemeModes.Light;
        }
        else
        {
            Mode = DesignThemeModes.Dark;
        }
    }

    /// <summary>Executes the after render action.</summary>
    /// <param name="firstRender">True to first render.</param>
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // first render of layout should log the version
            _ = JsLogAsync($"fhir-candle: {GetType()?.Assembly?.GetName()?.Version?.ToString()}");

            try
            {
                // use the RI name if there is one
                if (!string.IsNullOrEmpty(ServerConfig.ReferenceImplementation))
                {
                    _crumbs[0] = new NavBreadcrumb($"Candle ({ServerConfig.ReferenceImplementation})", "#");
                }

                StateHasChanged();
            }
            catch (Exception)
            {
                // ignore
            }
        }

        _ = JS.InvokeVoidAsync("processCopyable");
    }

    /// <summary>Notifies a navigation.</summary>
    /// <param name="page"> The page.</param>
    /// <param name="link"> The link.</param>
    /// <param name="depth">The depth.</param>
    public void NotifyNav(string page, string link, int depth)
    {
        if (_crumbs.Count > depth)
        {
            _crumbs.RemoveRange(depth, _crumbs.Count - depth);
        }

        _crumbs.Add(new NavBreadcrumb(page, link));

        StateHasChanged();
    }
}
