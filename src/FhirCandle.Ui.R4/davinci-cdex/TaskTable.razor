@using Microsoft.FluentUI.AspNetCore.Components;
@using Hl7.Fhir.Utility;

@inject IHttpContextAccessor HttpContextAccessor

@implements IDisposable

<FluentDataGrid Items="@FilteredItems" GridTemplateColumns="0.75fr 0.5fr 1fr 2fr">
    <PropertyColumn Title="Id" Property="@(t => t.Id)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(IdFilter)" Tooltip="true"  IsDefaultSortColumn="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch 
                    Autofocus="true"
                    @bind-Value="IdFilter"
                              @bind-Value:after="HandleFilterClear"
                    @oninput="@(e => IdFilter = e.Value?.ToString() ?? string.Empty)"
                    Placeholder="Task ID..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <PropertyColumn Title="Status" Property="@(t => t.Status.GetLiteral())" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(StatusFilter)" Tooltip="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch Autofocus="true"
                              @bind-Value="StatusFilter"
                              @bind-Value:after="HandleFilterClear"
                              @oninput="@(e => StatusFilter = e.Value?.ToString() ?? string.Empty)"
                              Placeholder="Task Status..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <PropertyColumn Title="Code" Property="@(t => string.Join(',', t.Code.Coding.Select(c => c.Code)))" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(CodeFilter)" Tooltip="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch Autofocus="true"
                              @bind-Value="CodeFilter"
                              @bind-Value:after="HandleFilterClear"
                              @oninput="@(e => CodeFilter = e.Value?.ToString() ?? string.Empty)"
                              Placeholder="Task Code..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <TemplateColumn Title="Set Status">
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="2">
            <FluentButton Appearance="Appearance.Accent" OnClick="@(() => SetTaskStatus(context, "requested"))">Requested</FluentButton>
            <FluentButton Appearance="Appearance.Accent" OnClick="@(() => SetTaskStatus(context, "accepted"))">Accepted</FluentButton>
            <FluentButton Appearance="Appearance.Accent" OnClick="@(() => SetTaskStatus(context, "rejected"))">Rejected</FluentButton>
            <FluentButton Appearance="Appearance.Accent" OnClick="@(() => SetTaskStatus(context, "in-progress"))">In Progress</FluentButton>
            <FluentButton Appearance="Appearance.Accent" OnClick="@(() => SetTaskStatus(context, "failed"))">Failed</FluentButton>
            <FluentButton Appearance="Appearance.Accent" OnClick="@(() => SetTaskStatus(context, "completed"))">Completed</FluentButton>
            <FluentButton Appearance="Appearance.Accent" OnClick="@(() => SetTaskStatus(context, "on-hold"))">On Hold</FluentButton>
        </FluentStack>
    </TemplateColumn>

</FluentDataGrid>

@code {
    private System.Timers.Timer? debounceTimer = null;

    private string _codeFilter = string.Empty;

    private string CodeFilter
    {
        get => _codeFilter;
        set
        {
            if (value != _codeFilter)
            {
                _codeFilter = value;
                ResetDebounce();
            }
        }
    }

    private string _statusFilter = string.Empty;

    private string StatusFilter
    {
        get => _statusFilter;
        set
        {
            if (value != _statusFilter)
            {
                _statusFilter = value;
                ResetDebounce();
            }
        }
    }

    private string _idFilter = string.Empty;

    private string IdFilter
    {
        get => _idFilter;
        set
        {
            if (value != _idFilter)
            {
                _idFilter = value;
                ResetDebounce();
            }
        }
    }

    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the name of the store.</summary>
    [Parameter]
    public string StoreName { get; set; } = string.Empty;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    public IFhirStore Store { get; set; } = null!;

    private IQueryable<Hl7.Fhir.Model.Task>? _filteredItems = null;

    private IQueryable<Hl7.Fhir.Model.Task>? FilteredItems => _filteredItems;

    /// <summary>The task store.</summary>
    private IResourceStore? _taskStore = null;

    /// <summary>Gets filtered items.</summary>
    /// <returns>The filtered items.</returns>
    private IQueryable<Hl7.Fhir.Model.Task>? GetFilteredItems()
    {
        if ((_taskStore == null) ||
            (!_taskStore.Any()))
        {
            return null;
        }

        // check for no filters
        if (string.IsNullOrWhiteSpace(_idFilter) &&
            string.IsNullOrWhiteSpace(_statusFilter) &&
            string.IsNullOrWhiteSpace(_codeFilter))
        {
            return _taskStore
                .Values
                .Select(o => (Hl7.Fhir.Model.Task)o)
                .AsQueryable<Hl7.Fhir.Model.Task>();
        }

        // apply filters
        return _taskStore
            .Values
            .Select(o => (Hl7.Fhir.Model.Task)o)
            .Where(r => string.IsNullOrWhiteSpace(_idFilter) ? true : r.Id.Contains(_idFilter, StringComparison.OrdinalIgnoreCase))
            .Where(r => string.IsNullOrWhiteSpace(_statusFilter) ? true : r.Status?.GetLiteral()?.Contains(_statusFilter, StringComparison.OrdinalIgnoreCase) ?? false)
            .Where(r => string.IsNullOrWhiteSpace(_codeFilter) ? true : r.Code?.Coding?.Any(c => c.Code.Contains(StatusFilter, StringComparison.OrdinalIgnoreCase)) ?? false)
            .AsQueryable<Hl7.Fhir.Model.Task>();
    }

    /// <summary>Executes the search action.</summary>
    private void OnSearchChanged()
    {
        _filteredItems = GetFilteredItems();
        StateHasChanged();
    }

    private async void TimerElapsed_TickAsync(object? sender, EventArgs e)
    {
        CancelDebounce();
        await InvokeAsync(OnSearchChanged);
    }

    private void ResetDebounce()
    {
        if (debounceTimer != null)
        {
            debounceTimer.Enabled = false;
            debounceTimer.Elapsed -= TimerElapsed_TickAsync;
            debounceTimer.Dispose();
            debounceTimer = null;
        }

        debounceTimer = new(400);
        debounceTimer.Elapsed += TimerElapsed_TickAsync;
        debounceTimer.Enabled = true;
        debounceTimer.Start();
    }

    private void CancelDebounce()
    {
        if (debounceTimer != null)
        {
            debounceTimer.Enabled = false;
            debounceTimer.Elapsed -= TimerElapsed_TickAsync;
            debounceTimer.Dispose();
            debounceTimer = null;
        }
    }

    private void HandleFilterClear()
    {
        CancelDebounce();
        _ = InvokeAsync(OnSearchChanged);
    }

    /// <summary>Sets the status.</summary>
    /// <param name="task">  The task to update.</param>
    /// <param name="status">The status.</param>
    private void SetTaskStatus(Hl7.Fhir.Model.Task? task, string status)
    {
        if ((task == null) ||
            string.IsNullOrEmpty(task.Id) || 
            string.IsNullOrEmpty(status) ||
            (_taskStore == null))
        {
            return;
        }

        Hl7.Fhir.Model.Task.TaskStatus? ts = Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Task.TaskStatus>(status);

        if (ts == null)
        {
            return;
        }
        
        // we want to store a new copy of the task so that events and subscriptions trigger (not update inline)
        // this is only an issue because we are pulling our list directly from the store instead of using a query to copy
        Hl7.Fhir.Model.Task t = (Hl7.Fhir.Model.Task)task.DeepCopy();

        t.Status = ts;

        FhirRequestContext ctx = new(Store, "PUT", $"Task/{t.Id}", t);

        if (!Store.InstanceUpdate(ctx, out _))
        {
            Console.WriteLine($"Error updating Task/{t.Id}!");
        }

        // reload results to see the changed value
        OnSearchChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Store.TryGetValue("Task", out _taskStore))
        {
            _taskStore.OnInstanceCreated += ResourceStore_OnChanged;
            _taskStore.OnInstanceDeleted += ResourceStore_OnChanged;
        }

        _filteredItems = GetFilteredItems();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (_taskStore != null)
        {
            _taskStore.OnInstanceCreated -= ResourceStore_OnChanged;
            _taskStore.OnInstanceDeleted -= ResourceStore_OnChanged;
        }

        if (Store.TryGetValue("Task", out _taskStore))
        {
            _taskStore.OnInstanceCreated += ResourceStore_OnChanged;
            _taskStore.OnInstanceDeleted += ResourceStore_OnChanged;
        }

        _filteredItems = GetFilteredItems();
    }

    private void ResourceStore_OnChanged(object? sender, EventArgs e)
    {
        // reset our filtered items
        _filteredItems = GetFilteredItems();
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();

        if (_taskStore != null)
        {
            _taskStore.OnInstanceCreated -= ResourceStore_OnChanged;
            _taskStore.OnInstanceDeleted -= ResourceStore_OnChanged;
        }
    }
}
