@foreach (KeyValuePair<string, object> kvp in Store["Task"])
{
    <tr>
        <td>@kvp.Key</td>
        @if (kvp.Value is Hl7.Fhir.Model.Task t)
        {
            <td>@t.Status</td>
            <td>@string.Join(", ", t.Code.Coding.Select(c => $"{c.System}|{c.Code}"))</td>
            <td>
                Change Status to:
                <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                    <MudButton OnClick="@(() => SetStatus(t.Id, "requested"))">requested</MudButton>
                    <MudButton OnClick="@(() => SetStatus(t.Id, "accepted"))">accepted</MudButton>
                    <MudButton OnClick="@(() => SetStatus(t.Id, "rejected"))">rejected</MudButton>
                    <MudButton OnClick="@(() => SetStatus(t.Id, "in-progress"))">in-progress</MudButton>
                    <MudButton OnClick="@(() => SetStatus(t.Id, "failed"))">failed</MudButton>
                    <MudButton OnClick="@(() => SetStatus(t.Id, "completed"))">completed</MudButton>
                    <MudButton OnClick="@(() => SetStatus(t.Id, "on-hold"))">on-hold</MudButton>
                </MudButtonGroup>
            </td>
        }
        else
        {
            <td>-</td>
            <td>-</td>
            <td></td>
        }
    </tr>
}

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the name of the store.</summary>
    [Parameter]
    public string StoreName { get; set; } = string.Empty;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    public IFhirStore Store { get; set; } = null!;

    /// <summary>Sets the status.</summary>
    /// <param name="id">    The identifier.</param>
    /// <param name="status">The status.</param>
    private void SetStatus(string id, string status)
    {
        if (string.IsNullOrEmpty(id) || 
            string.IsNullOrEmpty(status) ||
            (Store == null) ||
            (!Store["Task"].ContainsKey(id)))
        {
            return;
        }

        Hl7.Fhir.Model.Task.TaskStatus? ts = Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Task.TaskStatus>(status);

        if (ts == null)
        {
            return;
        }

        FhirRequestContext ctx = new(Store, "GET", $"Task/{id}");

        if ((!Store.InstanceRead(ctx, out FhirResponseContext response)) ||
            (response.Resource == null) ||
            (response.Resource is not Hl7.Fhir.Model.Task t))
        {
            Console.WriteLine($"Error retrieving Task/{id}");
            return;
        }

        t.Status = ts;

        ctx = new(Store, "PUT", $"Task/{id}", t);

        if (!Store.InstanceUpdate(ctx, out _))
        {
            Console.WriteLine($"Error updating Task/{id}!");
        }
    }
}
