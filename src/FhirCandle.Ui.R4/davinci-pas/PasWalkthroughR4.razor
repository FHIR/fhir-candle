@using System.Diagnostics.CodeAnalysis;
@inject IJSRuntime JS

<MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Start">
    <MudTimelineItem Color="@ColorForStep(1)">
        <ItemContent>
            <MudCard id="element-step-1">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="@ColorForStep(1)" Variant="Variant.Outlined">
                            <MudIcon Icon="@IconForStep(1)" />
                        </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Precondition Information</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">
                        This step contains links and information regarding this walkthrough.
                    </MudText>

                    <br />
                    <MudDivider />
                    <br />
                    <MudList>
                        <MudListItem>
                            <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Size="Size.Small" />
                            <MudLink Href="@($"/store?store={ProviderStore.Config.ControllerName}")"
                                        Underline="Underline.Always">Provider FHIR Contents</MudLink>: FHIR resources in the provider FHIR server
                        </MudListItem>
                        <MudListItem>
                            <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Size="Size.Small" />
                                <MudLink Href="@($"/subscriptions/notifications-received?store={ProviderStore.Config.ControllerName}")"
                                        Underline="Underline.Always">Provider Received Notifications</MudLink>: incoming notifications received by the provider
                        </MudListItem>

                        <MudListItem>
                            <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Size="Size.Small" />
                            <MudLink Href="@($"/store?store={PayerStore.Config.ControllerName}")"
                                        Underline="Underline.Always">Intermediary/Payer FHIR Contents</MudLink>: FHIR resources in the intermediary/payer FHIR server
                        </MudListItem>
                        <MudListItem>
                            <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Size="Size.Small" />
                            <MudLink Href="@($"/subscriptions/local?store={PayerStore.Config.ControllerName}")"
                                        Underline="Underline.Always">Intermediary/Payer Subscriptions</MudLink>: configured Subscriptions in the intermediary/payer FHIR server
                        </MudListItem>
                    </MudList>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Outlined" OnClick="@(() => MoveToStep(2))">Got it!</MudButton>
                </MudCardActions>
            </MudCard>
        </ItemContent>
    </MudTimelineItem>

    <MudTimelineItem Color="@ColorForStep(2)">
        <ItemContent>
            <MudCard id="element-step-2">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="@ColorForStep(2)" Variant="Variant.Outlined">
                            <MudIcon Icon="@IconForStep(2)" />
                        </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Select a patient</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">
                        As Provider: In this step we select the patient to use for our claim.
                    </MudText>
                    <br />
                    <MudDivider />
                    <br />
                    <MudSelect Label="Patient" HelperText="Patient we are filing a claim on" @bind-Value="_patient">
                        @foreach (ResourceInfo ri in _patients)
                        {
                            <MudSelectItem Value="@ri">@ri.Display</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Outlined" Disabled="@(_patient == null)" OnClick="@(() => MoveToStep(3))">Use patient: @_patient?.Id</MudButton>
                </MudCardActions>
            </MudCard>
        </ItemContent>
    </MudTimelineItem>

    <MudTimelineItem Color="@ColorForStep(3)">
        <ItemContent>
            <MudCard id="element-step-3">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="@ColorForStep(3)" Variant="Variant.Outlined">
                            <MudIcon Icon="@IconForStep(3)" />
                        </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Select claim data</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">
                        As Provider: In this step select data we are using to construct our our claim.
                    </MudText>

                    <br />
                    <MudDivider />
                    <br />

                    <MudText Typo="Typo.h6">
                        Focal Encounter (optional)
                        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => _focalEncounter = null)">Clear</MudButton>
                    </MudText>
                    @if (_encounters.Any())
                    {
                        <MudRadioGroup @bind-SelectedOption="@_focalEncounter">
                            @foreach (ResourceInfo en in _encounters)
                            {
                                <MudRadio Option="en"><code>@en.Display</code></MudRadio>
                            }
                        </MudRadioGroup>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1">No encounters found for patient @_patient?.Id</MudText>
                    }

                    <br />
                    <MudDivider />
                    <br />

                    <MudText Typo="Typo.h6">
                        Patient Insurance (Coverage) (optional)
                        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => _insurance = null)">Clear</MudButton>
                    </MudText>
                    @if (_coverages.Any())
                    {
                        <MudRadioGroup @bind-SelectedOption="@_insurance">
                            @foreach (ResourceInfo en in _coverages)
                            {
                                <MudRadio Option="en"><code>@en.Display</code></MudRadio>
                            }
                        </MudRadioGroup>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1">No coverage found for patient @_patient?.Id</MudText>
                    }

                    <br />
                    <MudDivider />
                    <br />

                    <MudText Typo="Typo.h6">Supporting Resources (min one required)</MudText>
                    @foreach (ResourceInfo sd in _claimSupportingData)
                    {
                        <MudCheckBox @bind-Checked="sd.Selected"><code>@sd.Display</code></MudCheckBox>
                    }

                    <br />
                    <MudDivider />
                    <br />

                    <MudText Typo="Typo.h6">Supporting Info Note (optional)</MudText>
                    <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="@_supportingMessage" Lines="5" />

                    <br />
                    <MudDivider />
                    <br />

                    @if (_organizations.Any())
                    {
                        <MudText Typo="Typo.h6">
                            Insurer (Required)
                            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => _insurer = null)">Clear</MudButton>
                        </MudText>

                        <MudRadioGroup @bind-SelectedOption="@_insurer">
                            @foreach (ResourceInfo ri in _organizations)
                            {
                                <MudRadio Option="ri"><code>@ri.Display</code></MudRadio>
                            }
                        </MudRadioGroup>

                        <br />
                        <MudDivider />
                        <br />

                        <MudText Typo="Typo.h6">
                            Requestor (Required)
                            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => _requestor = null)">Clear</MudButton>
                        </MudText>

                        <MudRadioGroup @bind-SelectedOption="@_requestor">
                            @foreach (ResourceInfo ri in _organizations)
                            {
                                <MudRadio Option="ri"><code>@ri.Display</code></MudRadio>
                            }
                        </MudRadioGroup>

                        @if ((errorAtStep == 3) && (!string.IsNullOrEmpty(errorMessage)))
                        {
                            <br />
                            <MudDivider />
                            <br />

                            <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
                        }
                    }

                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Outlined" OnClick="@(() => MoveToStep(4))">Use selected data</MudButton>
                </MudCardActions>
            </MudCard>
        </ItemContent>
    </MudTimelineItem>


    <MudTimelineItem Color="@ColorForStep(4)">
        <ItemContent>
            <MudCard id="element-step-4">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="@ColorForStep(4)" Variant="Variant.Outlined">
                            <MudIcon Icon="@IconForStep(4)" />
                        </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Build the claim</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">
                        In this step, we build the actual claim.
                    </MudText>
                    <br />
                    <MudDivider />

                    @if ((errorAtStep == 4) && (!string.IsNullOrEmpty(errorMessage)))
                    {
                        <br />
                        <MudDivider />
                        <br />

                        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Outlined" Disabled="@(_claim == null)" OnClick="@(() => MoveToStep(5))">Submit!</MudButton>
                </MudCardActions>
            </MudCard>
        </ItemContent>
    </MudTimelineItem>



</MudTimeline>

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    [Parameter]
    public IFhirStore PayerStore { get; set; } = null!;

    [Parameter]
    public IFhirStore ProviderStore { get; set; } = null!;

    /// <summary>Gets or sets the on step.</summary>
    private int onStep { get; set; } = 1;

    /// <summary>Gets or sets the error at step.</summary>
    private int errorAtStep { get; set; } = -1;

    /// <summary>Message describing the error.</summary>
    private string errorMessage = string.Empty;

    private static readonly List<string> _allowedPatientRequestTypes = new()
    {
        "ServiceRequest",
        "DeviceRequest",
        "MedicationRequest",
        "DocumentReference",
    };

    private string _supportingMessage = string.Empty;

    private record class ResourceInfo
    {
        /// <summary>Initializes a new instance of the SupportingData class.</summary>
        public ResourceInfo() { }

        /// <summary>Initializes a new instance of the SupportingData class.</summary>
        /// <param name="other">The other.</param>
        [SetsRequiredMembers]
        protected ResourceInfo(ResourceInfo other)
        {
            ResourceType = other.ResourceType;
            Id = other.Id;
            Resource = (Hl7.Fhir.Model.Resource)other.Resource.DeepCopy();
            Display = other.Display;
        }

        public bool Selected { get; set; } = false;

        public required string ResourceType { get; init; }

        public required string Id { get; init; }

        public required Hl7.Fhir.Model.Resource Resource { get; init; }

        public required string Display { get; init; }

        public override string ToString()
        {
            return Display;
        }

        bool IEquatable<ResourceInfo?>.Equals(ResourceInfo? obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj is ResourceInfo sd)
            {
                return (this.ResourceType.Equals(sd.ResourceType) && this.Id.Equals(sd.Id));
            }

            return false;
        }

        public int CompareTo(ResourceInfo? other)
        {
            if (other == null)
            {
                return 1;
            }

            if (ResourceType.Equals(other.ResourceType))
            {
                return Id.CompareTo(other.Id);
            }

            return ResourceType.CompareTo(other.ResourceType);
        }

        public override int GetHashCode()
        {
            return $"{ResourceType}/{Id}".GetHashCode();
        }
    }

    private IEnumerable<ResourceInfo> _patients = Enumerable.Empty<ResourceInfo>();

    private ResourceInfo? _patient = null;

    private IEnumerable<ResourceInfo> _encounters = Enumerable.Empty<ResourceInfo>();

    private ResourceInfo? _focalEncounter = null;

    private ResourceInfo? _insurance = null;

    private IEnumerable<ResourceInfo> _claimSupportingData = Enumerable.Empty<ResourceInfo>();

    private IEnumerable<ResourceInfo> _organizations = Enumerable.Empty<ResourceInfo>();

    private IEnumerable<ResourceInfo> _coverages = Enumerable.Empty<ResourceInfo>();

    private ResourceInfo? _insurer = null;
    private ResourceInfo? _requestor = null;

    private Hl7.Fhir.Model.Claim? _claim = null;
    private Hl7.Fhir.Model.Bundle? _requestBundle = null;

    /// <summary>Color for step.</summary>
    /// <param name="step">Amount to increment by.</param>
    /// <returns>A MudBlazor.Color.</returns>
    private MudBlazor.Color ColorForStep(int step)
    {
        if (step == errorAtStep)
        {
            return Color.Error;
        }

        if (step < onStep)
        {
            return Color.Success;
        }

        if (step == onStep)
        {
            return Color.Primary;
        }

        return Color.Default;
    }

    /// <summary>Icon for step.</summary>
    /// <param name="step">Amount to increment by.</param>
    /// <returns>A string.</returns>
    private string IconForStep(int step)
    {
        if (step == errorAtStep)
        {
            return Icons.Material.Filled.Error;
        }

        if (step < onStep)
        {
            return Icons.Material.Filled.Check;
        }

        if (step == onStep)
        {
            return Icons.Material.Filled.Edit;
        }

        return Icons.Material.Filled.LockClock;
    }

    /// <summary>Move to step.</summary>
    /// <param name="toStep">to step.</param>
    private void MoveToStep(int toStep)
    {
        errorAtStep = -1;
        errorMessage = string.Empty;

        // peform any validation
        switch (toStep)
        {
            case 4:
                if (!ValidateClaimData())
                {
                    return;
                }
                break;
        }

        onStep = toStep;

        if (toStep < 9)
        {
            _ = JS.InvokeVoidAsync("scrollElementIntoView", "element-step-" + toStep);
        }

        // call any additional functions
        switch (toStep)
        {
            case 2:
                GetPatients();
                break;

            case 3:
                GetCurrentRequestResources();
                break;

            case 4:
                BuildClaim();
                break;
        }

        InvokeAsync(() => StateHasChanged());
    }

    private void BuildClaim()
    {
        if (_patient == null)
        {
            errorAtStep = 4;
            errorMessage = "Cannot build a Claim without a patient.";
            return;
        }

        if (_insurer == null)
        {
            errorAtStep = 4;
            errorMessage = $"Insurer is REQUIRED - see PAS Claim Base profile.";
            return;
        }

        if (_requestor == null)
        {
            errorAtStep = 4;
            errorMessage = $"Requestor is REQUIRED - see PAS Claim Base profile.";
            return;
        }

        if (_insurance == null)
        {
            errorAtStep = 4;
            errorMessage = $"Insurance is REQUIRED - see PAS Claim Base profile.";
            return;
        }

        _claim = new()
        {
            Identifier = new List<Hl7.Fhir.Model.Identifier>
            {
                new()
                {
                    System = "http://example.org/PATIENT_EVENT_TRACE_NUMBER",
                    Value = Guid.NewGuid().ToString(),
                    Assigner = new() 
                    {
                        Identifier = new()
                        {
                            System = "http://example.org/USER_ASSIGNED",
                            Value = Guid.NewGuid().ToString(),
                        },
                    },
                },
            },
            Status = Hl7.Fhir.Model.FinancialResourceStatusCodes.Active,
            Type = new Hl7.Fhir.Model.CodeableConcept
            {
                Coding = new List<Hl7.Fhir.Model.Coding>
                {
                    new()
                    {
                        System = "http://terminology.hl7.org/CodeSystem/claim-type",
                        Code = "professional",
                        Display = "Professional",
                    },
                },
            },
            Use = Hl7.Fhir.Model.ClaimUseCode.Preauthorization,
            Patient = new Hl7.Fhir.Model.ResourceReference
            {
                Reference = $"Patient/{_patient.Id}",
                Identifier = new Hl7.Fhir.Model.Identifier
                {
                    System = ((Hl7.Fhir.Model.Patient)_patient.Resource).Identifier.First().System,
                    Value = ((Hl7.Fhir.Model.Patient)_patient.Resource).Identifier.First().Value,
                },
            },
            Created = DateTimeOffset.UtcNow.ToString("o"),
            Insurer = new Hl7.Fhir.Model.ResourceReference
            {
                Reference = $"Organization/{_insurer.Id}",
                Identifier = ((Hl7.Fhir.Model.Organization)_insurer.Resource).Identifier?.Any() ?? false
                    ? new Hl7.Fhir.Model.Identifier
                    {
                        System = ((Hl7.Fhir.Model.Organization)_insurer.Resource).Identifier.First().System,
                        Value = ((Hl7.Fhir.Model.Organization)_insurer.Resource).Identifier.First().Value,
                    }
                    : null,
            },
            Provider = new Hl7.Fhir.Model.ResourceReference
            {
                Reference = $"Organization/{_requestor.Id}",
                Identifier = ((Hl7.Fhir.Model.Organization)_requestor.Resource).Identifier?.Any() ?? false
                    ? new Hl7.Fhir.Model.Identifier
                    {
                        System = ((Hl7.Fhir.Model.Organization)_requestor.Resource).Identifier.First().System,
                        Value = ((Hl7.Fhir.Model.Organization)_requestor.Resource).Identifier.First().Value,
                    }
                    : null,
            },
            Priority = new Hl7.Fhir.Model.CodeableConcept
            {
                Coding = new List<Hl7.Fhir.Model.Coding>
                {
                    new()
                    {
                        System = "http://terminology.hl7.org/CodeSystem/processpriority",
                        Code = "normal",
                        Display = "Normal",
                    },
                },
            },
            Insurance = new List<Hl7.Fhir.Model.Claim.InsuranceComponent>
            {
                new()
                {
                    Coverage = new Hl7.Fhir.Model.ResourceReference
                    {
                        Reference = $"Coverage/{_insurance.Id}",
                        Identifier = ((Hl7.Fhir.Model.Coverage)_insurance.Resource).Identifier?.Any() ?? false
                            ? new Hl7.Fhir.Model.Identifier
                            {
                                System = ((Hl7.Fhir.Model.Coverage)_insurance.Resource).Identifier.First().System,
                                Value = ((Hl7.Fhir.Model.Coverage)_insurance.Resource).Identifier.First().Value,
                            }
                            : null,
                    },
                    Sequence = 1,
                    Focal = true,
                },
            },
            Item = new List<Hl7.Fhir.Model.Claim.ItemComponent>()
            {
                new()
                {
                    Extension = new List<Hl7.Fhir.Model.Extension>
                    {
                        new()
                        {
                            Url = "http://hl7.org/fhir/us/davinci-pas/StructureDefinition/extension-serviceItemRequestType",
                            Value = new Hl7.Fhir.Model.CodeableConcept
                            {
                                Coding = new List<Hl7.Fhir.Model.Coding>
                                {
                                    new()
                                    {
                                        System = "https://codesystem.x12.org/005010/1525",
                                        Code = "HS",
                                        Display = "Health Services Review",
                                    },
                                },
                            },
                        },
                        new()
                        {
                            Url = "http://hl7.org/fhir/us/davinci-pas/StructureDefinition/extension-certificationType",
                            Value = new Hl7.Fhir.Model.CodeableConcept
                            {
                                Coding = new List<Hl7.Fhir.Model.Coding>
                                {
                                    new()
                                    {
                                        System = "https://codesystem.x12.org/005010/1322",
                                        Code = "I",
                                        Display = "Initial",
                                    },
                                },
                            },
                        }
                    },
                }
            },
        };

        // check for a focal encounter as an extension
        if (_focalEncounter != null)
        {
            _claim.Extension.Add(new ()
            {
                Url = "http://hl7.org/fhir/5.0/StructureDefinition/extension-Claim.encounter",
                Value = new Hl7.Fhir.Model.ResourceReference($"Encounter/{_focalEncounter.Id}"),
            });
        }

        // check for adding a note as supporting info
        if (!string.IsNullOrEmpty(_supportingMessage))
        {
            _claim.SupportingInfo.Add(new ()
            {
                Sequence = 1,
                Category = new Hl7.Fhir.Model.CodeableConcept
                {
                    Coding = new List<Hl7.Fhir.Model.Coding>
                    {
                        new()
                        {
                            System = "http://hl7.org/fhir/us/davinci-pas/CodeSystem/PASSupportingInfoType",
                            Code = "freeFormMessage",
                            Display = "Free Form Message",
                        },
                    },
                },
                Value = new Hl7.Fhir.Model.FhirString(_supportingMessage),
            });
        }

        // build the claim bundle
        _requestBundle = new()
        {
            Identifier = new Hl7.Fhir.Model.Identifier
            {
                System = "http://example.org/SUBMITTER_TRANSACTION_IDENTIFIER",
                Value = Guid.NewGuid().ToString(),
            },
            Type = Hl7.Fhir.Model.Bundle.BundleType.Collection,
            Entry = new List<Hl7.Fhir.Model.Bundle.EntryComponent>()
                {
                    new()
                    {
                        Resource = _claim,
                    },
                },
        };
    }

    private bool ValidateClaimData()
    {
        // validate data
        if (_patient == null)
        {
            errorAtStep = 3;
            errorMessage = "Cannot build a Claim without a patient.";
            return false;
        }

        if (_insurer == null)
        {
            errorAtStep = 3;
            errorMessage = $"Insurer is REQUIRED - see PAS Claim Base profile.";
            return false;
        }

        if (_insurer.ResourceType != "Organization")
        {
            errorAtStep = 3;
            errorMessage = $"Insurer must be an Organization, found: {_insurer.ResourceType}.";
            return false;
        }

        if (!(_insurer.Resource is Hl7.Fhir.Model.Organization insurer))
        {
            errorAtStep = 3;
            errorMessage = $"Insurer must be an Organization, found: {_insurer.Resource.GetType().Name}.";
            return false;
        }

        if (insurer.Active == null)
        {
            errorAtStep = 3;
            errorMessage = "Insurer must have 'active' element.";
            return false;
        }

        if (string.IsNullOrEmpty(insurer.Name))
        {
            errorAtStep = 3;
            errorMessage = "Insurer must have 'name' element.";
            return false;
        }

        if (_requestor == null)
        {
            errorAtStep = 3;
            errorMessage = $"Requestor is REQUIRED - see PAS Claim Base profile.";
            return false;
        }

        if (_requestor.ResourceType != "Organization")
        {
            errorAtStep = 3;
            errorMessage = $"Requestor must be an Organization, found: {_requestor.ResourceType}.";
            return false;
        }

        if (!(_requestor.Resource is Hl7.Fhir.Model.Organization requestor))
        {
            errorAtStep = 3;
            errorMessage = $"Requestor must be an Organization, found: {_requestor.Resource.GetType().Name}.";
            return false;
        }

        if (requestor.Active == null)
        {
            errorAtStep = 3;
            errorMessage = "Requestor must have 'active' element.";
            return false;
        }

        if (string.IsNullOrEmpty(requestor.Name))
        {
            errorAtStep = 3;
            errorMessage = "Requestor must have 'name' element.";
            return false;
        }

        if (string.IsNullOrEmpty(_supportingMessage) &&
            (!_claimSupportingData.Any(i => i.Selected)))
        {
            errorAtStep = 3;
            errorMessage = "At least one piece of supporting evidence is required.  Please either select a supporting resource or add a message.";
            return false;
        }

        return true;
    }

    /// <summary>Gets the patients.</summary>
    private void GetPatients()
    {
        List<ResourceInfo> patients = new();

        if (ProviderStore.TryTypeSearch("Patient", string.Empty, out object? pb) &&
            (pb != null) &&
            (pb is Hl7.Fhir.Model.Bundle patientBundle))
        {
            foreach (Hl7.Fhir.Model.Bundle.EntryComponent entry in patientBundle.Entry)
            {
                if (entry.Resource is Hl7.Fhir.Model.Patient r)
                {
                    patients.Add(new ResourceInfo
                        {
                            ResourceType = r.TypeName,
                            Id = r.Id,
                            Resource = r,
                            Display = DisplayFor(r),
                        });
                }
            }
        }

        _patients = patients.OrderBy(p => p.Display);
    }

    private void GetCurrentRequestResources()
    {
        if (_patient == null)
        {
            _encounters = Enumerable.Empty<ResourceInfo>();
            _claimSupportingData = Enumerable.Empty<ResourceInfo>();
            _organizations = Enumerable.Empty<ResourceInfo>();

            return;
        }

        List<ResourceInfo> encounters = new();
        List<ResourceInfo> data = new();
        List<ResourceInfo> orgs = new();
        List<ResourceInfo> coverages = new();
        string query;

        if (ProviderStore.TryTypeSearch("Encounter", $"patient={_patient.Id}", out object? eb) &&
            (eb != null) &&
            (eb is Hl7.Fhir.Model.Bundle encounterBundle))
        {
            foreach (Hl7.Fhir.Model.Bundle.EntryComponent entry in encounterBundle.Entry)
            {
                if (entry.Resource is Hl7.Fhir.Model.Resource r)
                {
                    encounters.Add(new ResourceInfo
                        {
                            ResourceType = r.TypeName,
                            Id = r.Id,
                            Resource = r,
                            Display = DisplayFor(r),
                        });
                }
            }
        }

        if (ProviderStore.TryTypeSearch("Coverage", $"patient={_patient.Id}", out object? cb) &&
            (cb != null) &&
            (cb is Hl7.Fhir.Model.Bundle coverageBundle))
        {
            foreach (Hl7.Fhir.Model.Bundle.EntryComponent entry in coverageBundle.Entry)
            {
                if (entry.Resource is Hl7.Fhir.Model.Resource r)
                {
                    coverages.Add(new ResourceInfo
                        {
                            ResourceType = r.TypeName,
                            Id = r.Id,
                            Resource = r,
                            Display = DisplayFor(r),
                        });
                }
            }
        }

        query = $"patient={_patient.Id}&_type={string.Join(',', _allowedPatientRequestTypes)}";

        if (ProviderStore.TrySystemSearch(query, out object? pb) &&
            (pb != null) &&
            (pb is Hl7.Fhir.Model.Bundle patientBundle))
        {
            foreach (Hl7.Fhir.Model.Bundle.EntryComponent entry in patientBundle.Entry)
            {
                if (entry.Resource is Hl7.Fhir.Model.Resource r)
                {
                    data.Add(new ResourceInfo
                    {
                        ResourceType = r.TypeName,
                        Id = r.Id,
                        Resource = r,
                        Display = DisplayFor(r),
                    });
                }
            }
        }

        if (ProviderStore.TryTypeSearch("Organization", string.Empty, out object? rb) &&
            (rb != null) &&
            (rb is Hl7.Fhir.Model.Bundle relatedBundle))
        {
            foreach (Hl7.Fhir.Model.Bundle.EntryComponent entry in relatedBundle.Entry)
            {
                if (entry.Resource is Hl7.Fhir.Model.Resource r)
                {
                    orgs.Add(new ResourceInfo
                    {
                        ResourceType = r.TypeName,
                        Id = r.Id,
                        Resource = r,
                        Display = DisplayFor(r),
                    });
                }
            }
        }

        _coverages = coverages.OrderBy(sd => sd.Id);
        _encounters = encounters.OrderBy(sd => sd.Id);
        _claimSupportingData = data.OrderBy(sd => sd.ToString());
        _organizations = orgs.OrderBy(sd => sd.Id);
    }

    private string DisplayFor(Hl7.Fhir.Model.Resource resource) => resource switch
    {
        Hl7.Fhir.Model.ServiceRequest r => $"{r.TypeName}/{r.Id}: {r.Status} ({r.Priority}) {DisplayFor(r.Code)}",
        Hl7.Fhir.Model.DeviceRequest r => $"{r.TypeName}/{r.Id}: {r.Status} ({r.Priority}) {DisplayFor(r.Code)}",
        Hl7.Fhir.Model.MedicationRequest r => $"{r.TypeName}/{r.Id}: {r.Status} ({r.Priority}) {DisplayFor(r.Medication)}",
        Hl7.Fhir.Model.Coverage r => $"{r.TypeName}/{r.Id}: {r.Status} {DisplayFor(r.Type)} {string.Join(", ", r.Payor.Select(p => DisplayFor(p)))}",
        Hl7.Fhir.Model.DocumentReference r => $"{r.TypeName}/{r.Id}: {r.Status}-{r.DocStatus} {DisplayFor(r.Type)} {string.Join(", ", r.Category.Select(c => DisplayFor(c)))}",
        Hl7.Fhir.Model.Organization r => $"{r.TypeName}/{r.Id}: {r.Name} {string.Join(", ", r.Type.Select(t => DisplayFor(t)))}",
        Hl7.Fhir.Model.Encounter r => $"{r.TypeName}/{r.Id}: {r.Status} {DisplayFor(r.Class)} {string.Join(", ", r.Type.Select(t => DisplayFor(t)))}",
        Hl7.Fhir.Model.Patient r => $"{string.Join(", ", r.Name.Select(n => $"{n.Family}, {string.Join(' ', n.Given)}"))} ({r.TypeName}/{r.Id})",
        null => string.Empty,
        _ => resource.TypeName + "/" + resource.Id,
    };

    private string DisplayFor(Hl7.Fhir.Model.DataType dt)
    {
        if (dt == null)
        {
            return string.Empty;
        }

        switch (dt)
        {
            case Hl7.Fhir.Model.FhirString s:
                return s.Value;

            case Hl7.Fhir.Model.Code c:
                return c.Value;

            case Hl7.Fhir.Model.Coding coding:
                return string.IsNullOrEmpty(coding.Display) ? $"{coding.System}|{coding.Code}" : coding.Display;

            case Hl7.Fhir.Model.Identifier i:
                {
                    if (!string.IsNullOrEmpty(i.System) || !string.IsNullOrEmpty(i.Value))
                    {
                        return $"{i.System}|{i.Value}";
                    }

                    if (i.Type != null)
                    {
                        return DisplayFor(i.Type);
                    }
                }
                break;

            case Hl7.Fhir.Model.ResourceReference rr:
                {
                    if (!string.IsNullOrEmpty(rr.Display))
                    {
                        return rr.Display;
                    }

                    if (!string.IsNullOrEmpty(rr.Reference))
                    {
                        return rr.Reference;
                    }

                    if (rr.Identifier != null)
                    {
                        DisplayFor(rr.Identifier);
                    }
                }
                break;

            case Hl7.Fhir.Model.CodeableConcept cc:
            {
                if (!string.IsNullOrEmpty(cc.Text))
                {
                    return cc.Text;
                }

                return string.Join(", ", cc.Coding.Select(c => string.IsNullOrEmpty(c.Display) ? $"{c.System}|{c.Code}" : c.Display));
            }
        }

        return dt.ToString() ?? string.Empty;
    }

}
