# This file is a k8s deployment file for the Reference Implementations of the Argonaut Project
# The first section is the ingress for all RIs
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: subscriptions-ingress
  namespace: subscriptions-ri
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - subscriptions.argo.run
    - cdex.ri.argo.run
    - ecr.ri.argo.run
    - vitals-server.ri.argo.run
    - feature-cs-server.ri.argo.run
    secretName: tls-secret
  rules:
  - host: subscriptions.argo.run
    http:
      paths:
      - backend:
          service:
            name: ri-subscriptions
            port:
              number: 80
        path: /
        pathType: Prefix
  - host: cdex.ri.argo.run
    http:
      paths:
      - backend:
          service:
            name: ri-cdex
            port:
              number: 80
        path: /
        pathType: Prefix
  - host: ecr.ri.argo.run
    http:
      paths:
      - backend:
          service:
            name: ri-ecr
            port:
              number: 80
        path: /
        pathType: Prefix
  - host: vitals-server.ri.argo.run
    http:
      paths:
      - backend:
          service:
            name: ri-vitals-server
            port:
              number: 80
        path: /
        pathType: Prefix
  - host: feature-cs-server.ri.argo.run
    http:
      paths:
      - backend:
          service:
            name: ri-feature-cs-server
            port:
              number: 80
        path: /
        pathType: Prefix
---
# subscriptions.argo.run Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ri-subscriptions
  namespace: subscriptions-ri
  labels:
    app: ri-subscriptions
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ri-subscriptions
  template:
    metadata:
      labels:
        app: ri-subscriptions
    spec:
      containers:
      - name: fhir-candle
        image: ghcr.io/fhir/fhir-candle:latest
        resources:
          limits:
            memory: "512Mi"
          requests:
            memory: "128Mi"
        command: ["dotnet"]
        args: ["fhir-candle.dll", "--reference-implementation", "subscriptions", "--load-package", "hl7.fhir.uv.subscriptions-backport#1.1.0", "--load-examples", "false", "--protect-source", "true", "-m", "200"]
        envFrom:
        - configMapRef:
            name: special-config
        env:
        - name: Listen_Port
          value: "5826"
        - name: Public_Url
          value: "https://subscriptions.argo.run"
        - name: Zulip_Email
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: Zulip_Email
        - name: Zulip_Key
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: Zulip_Key
        - name: Zulip_Url
          value: "https://chat.fhir.org"
        - name: SMTP_Host
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Host
        - name: SMTP_Password
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Password
        - name: SMTP_Port
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Port
        - name: SMTP_User
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_User
        ports:
        - containerPort: 5826
---
# subscriptions.argo.run Service
apiVersion: v1
kind: Service
metadata:
  namespace: subscriptions-ri
  name: ri-subscriptions
spec:
  selector:
    app: ri-subscriptions
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5826
---
# cdex.ri.argo.run Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ri-cdex
  namespace: subscriptions-ri
  labels:
    app: ri-cdex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ri-cdex
  template:
    metadata:
      labels:
        app: ri-cdex
    spec:
      containers:
      - name: fhir-candle
        image: ghcr.io/fhir/fhir-candle:latest
        resources:
          limits:
            memory: "512Mi"
          requests:
            memory: "128Mi"
        command: ["dotnet"]
        args: ["fhir-candle.dll", "--reference-implementation", "hl7.fhir.us.davinci-cdex", "--ci-package", "HL7/davinci-pas", "--load-package", "hl7.fhir.us.davinci-cdex#2.0.0", "--r4", "provider", "--r4", "payer", "--protect-source", "true", "-m", "400", "--max-subscription-minutes", "1440"]
        envFrom:
        - configMapRef:
            name: special-config
        env:
        - name: Listen_Port
          value: "5826"
        - name: Public_Url
          value: "https://subscriptions.argo.run"
        - name: Zulip_Email
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: Zulip_Email
        - name: Zulip_Key
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: Zulip_Key
        - name: Zulip_Url
          value: "https://chat.fhir.org"
        - name: SMTP_Host
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Host
        - name: SMTP_Password
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Password
        - name: SMTP_Port
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Port
        - name: SMTP_User
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_User
        ports:
        - containerPort: 5826
---
# cdex.ri.argo.run Service
apiVersion: v1
kind: Service
metadata:
  namespace: subscriptions-ri
  name: ri-cdex
spec:
  selector:
    app: ri-cdex
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5826

---
# ecr.ri.argo.run Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ri-ecr
  namespace: subscriptions-ri
  labels:
    app: ri-ecr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ri-ecr
  template:
    metadata:
      labels:
        app: ri-ecr
    spec:
      containers:
      - name: fhir-candle
        image: ghcr.io/fhir/fhir-candle:latest
        resources:
          limits:
            memory: "512Mi"
          requests:
            memory: "128Mi"
        command: ["dotnet"]
        args: ["fhir-candle.dll", "--reference-implementation", "hl7.fhir.us.ecr", "--load-package", "hl7.fhir.us.ecr", "--r4", "r4", "--smart-optional", "r4", "--protect-source", "true", "-m", "1000", "--max-subscription-minutes", "240", "--load-examples", "true"]
        envFrom:
        - configMapRef:
            name: special-config
        env:
        - name: Listen_Port
          value: "5826"
        - name: Public_Url
          value: "https://subscriptions.argo.run"
        - name: Zulip_Email
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: Zulip_Email
        - name: Zulip_Key
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: Zulip_Key
        - name: Zulip_Url
          value: "https://chat.fhir.org"
        - name: SMTP_Host
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Host
        - name: SMTP_Password
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Password
        - name: SMTP_Port
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Port
        - name: SMTP_User
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_User
        ports:
        - containerPort: 5826
---
# ecr.ri.argo.run Service
apiVersion: v1
kind: Service
metadata:
  namespace: subscriptions-ri
  name: ri-ecr
spec:
  selector:
    app: ri-ecr
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5826

---
# vitals-server.ri.argo.run Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ri-vitals-server
  namespace: subscriptions-ri
  labels:
    app: ri-vitals-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ri-vitals-server
  template:
    metadata:
      labels:
        app: ri-vitals-server
    spec:
      containers:
      - name: fhir-candle
        image: ghcr.io/fhir/fhir-candle:latest
        resources:
          limits:
            memory: "512Mi"
          requests:
            memory: "128Mi"
        command: ["dotnet"]
        args: ["fhir-candle.dll", "--reference-implementation", "smart", "--r4", "open", "--r4", "smart", "--smart-required", "smart", "--protect-source", "true", "-m", "500"]
        envFrom:
        - configMapRef:
            name: special-config
        env:
        - name: Listen_Port
          value: "5826"
        - name: Public_Url
          value: "https://subscriptions.argo.run"
        - name: Zulip_Email
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: Zulip_Email
        - name: Zulip_Key
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: Zulip_Key
        - name: Zulip_Url
          value: "https://chat.fhir.org"
        - name: SMTP_Host
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Host
        - name: SMTP_Password
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Password
        - name: SMTP_Port
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Port
        - name: SMTP_User
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_User
        ports:
        - containerPort: 5826
---
# vitals-server.ri.argo.run Service
apiVersion: v1
kind: Service
metadata:
  namespace: subscriptions-ri
  name: ri-vitals-server
spec:
  selector:
    app: ri-vitals-server
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5826

---
# feature-cs-server.ri.argo.run Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ri-feature-cs-server
  namespace: subscriptions-ri
  labels:
    app: ri-feature-cs-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ri-feature-cs-server
  template:
    metadata:
      labels:
        app: ri-feature-cs-server
    spec:
      containers:
      - name: fhir-candle
        image: ghcr.io/fhir/fhir-candle:latest
        resources:
          limits:
            memory: "512Mi"
          requests:
            memory: "128Mi"
        command: ["dotnet"]
        args: ["fhir-candle.dll", "--reference-implementation", "feature-cs", "--r4", "r4", "--smart-optional", "r4", "--protect-source", "true", "-m", "100"]
        envFrom:
        - configMapRef:
            name: special-config
        env:
        - name: Listen_Port
          value: "5826"
        - name: Public_Url
          value: "https://subscriptions.argo.run"
        - name: Zulip_Email
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: Zulip_Email
        - name: Zulip_Key
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: Zulip_Key
        - name: Zulip_Url
          value: "https://chat.fhir.org"
        - name: SMTP_Host
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Host
        - name: SMTP_Password
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Password
        - name: SMTP_Port
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_Port
        - name: SMTP_User
          valueFrom:
            secretKeyRef:
              name: argonaut-secrets
              key: SMTP_User
        ports:
        - containerPort: 5826
---
# vitals-server.ri.argo.run Service
apiVersion: v1
kind: Service
metadata:
  namespace: subscriptions-ri
  name: ri-feature-cs-server
spec:
  selector:
    app: ri-feature-cs-server
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5826

---
# Create a service account for GH workflow rollouts
apiVersion: v1
kind: ServiceAccount
metadata:
  name: github-actions-deployer
  namespace: subscriptions-ri
---
# Establish a secret for the service account
apiVersion: v1
kind: Secret
metadata:
  name: github-actions-token
  namespace: subscriptions-ri
  annotations:
    kubernetes.io/service-account.name: github-actions-deployer
type: kubernetes.io/service-account-token
---
# Set the role for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: subscriptions-ri
  name: deployment-restarter
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "patch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
# Bind the role to the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: github-actions-deployer-binding
  namespace: subscriptions-ri
subjects:
- kind: ServiceAccount
  name: github-actions-deployer
  namespace: subscriptions-ri
roleRef:
  kind: Role
  name: deployment-restarter
  apiGroup: rbac.authorization.k8s.io

# To use the rollout serivce - commands to run:
#
# 1. Apply the YAML file:
# kubectl apply -f k8-argo-run-ris.yml
#
# 2. Retrieve the token, certificate, and server information:
# KUBE_TOKEN=$(kubectl get secret github-actions-token -n subscriptions-ri -o jsonpath='{.data.token}' | base64 --decode)
# KUBE_CERTIFICATE=$(kubectl get secret github-actions-token -n subscriptions-ri -o jsonpath='{.data.ca\.crt}')
# KUBE_SERVER=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
#
# 3. Create a JSON object with the Kubernetes configuration:
# KUBE_CONFIG=$(echo '{
#   "KUBE_TOKEN": "'$KUBE_TOKEN'",
#   "KUBE_CERTIFICATE": "'$KUBE_CERTIFICATE'",
#   "KUBE_SERVER": "'$KUBE_SERVER'"
# }' | jq -c .)
#
# 4. Display the JSON object to be added as a GitHub secret:
# echo "Add this JSON object as a secret named KUBE_CONFIG in your GitHub repository:"
# echo $KUBE_CONFIG
#
# 5. Add the JSON object as a secret to your GitHub repository:
#    - Go to your GitHub repository
#    - Navigate to Settings > Secrets and variables > Actions
#    - Add a new repository secret:
#      - Name: KUBE_CONFIG
#      - Value: [Paste the JSON object from step 4]
#
# 6. Create a GitHub Actions workflow file in your repository:
#    Create a file at .github/workflows/restart-deployment.yml with the following content:
#
# name: Restart Deployment
# on:
#   workflow_dispatch:
#     inputs:
#       deployment_name:
#         description: 'Name of the deployment to restart'
#         required: true
# jobs:
#   restart_deployment:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Configure Kubectl
#       env:
#         KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
#       run: |
#         mkdir -p $HOME/.kube
#         KUBE_TOKEN=$(echo $KUBE_CONFIG | jq -r .KUBE_TOKEN)
#         KUBE_CERTIFICATE=$(echo $KUBE_CONFIG | jq -r .KUBE_CERTIFICATE)
#         KUBE_SERVER=$(echo $KUBE_CONFIG | jq -r .KUBE_SERVER)
#         echo "$KUBE_CERTIFICATE" | base64 --decode > $HOME/.kube/ca.crt
#         kubectl config set-cluster argocluster-doks --server="$KUBE_SERVER" --certificate-authority=$HOME/.kube/ca.crt
#         kubectl config set-credentials github-actions-deployer --token="$KUBE_TOKEN"
#         kubectl config set-context argo --cluster=argocluster-doks --user=github-actions-deployer --namespace=subscriptions-ri
#         kubectl config use-context argo
#     - name: Restart Deployment
#       run: |
#         kubectl rollout restart deployment/subscriptions-ri -n subscriptions-ri
